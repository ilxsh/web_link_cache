<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="一、stress工具安装：1、获取stress源码安装包（stress-1.0.4.tar.gz）3、解压并安装 4、进入stress-1.0.4文件夹下，编译并安装stress 默认安装在：/usr" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>linux  stress  压测命令的使用 - AmilyAmily - 博客园</title>
    <link rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/bluefresh/bundle-bluefresh.min.css?v=Jq_6QgWhhDfWNeDs7G0f_1vTjy8Ao6iPfy1EVyQejGw" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/bluefresh/bundle-bluefresh-mobile.min.css?v=1kLJchllcVEJlcH4HOtIUkiVRLCKB-C8RWJFxdVwH_8" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/AmilyWilly/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/AmilyWilly/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/AmilyWilly/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=6bwfCY2e02dLOXNW99G2BHZkYFmw9QyYTWeJ-W-sudo"></script>
    <script>
        var currentBlogId = 236318;
        var currentBlogApp = 'AmilyWilly';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BlueFresh';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/AmilyWilly/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/AmilyWilly/">AmilyAmily</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/AmilyWilly/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/AmilyAmily">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/AmilyWilly/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
360&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
23</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/AmilyWilly/p/7852318.html">linux  stress  压测命令的使用</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>一、stress工具安装：<br />1、获取stress源码安装包（stress-1.0.4.tar.gz）<br />3、解压并安装</p>
<div class="cnblogs_code">
<pre>[root@localhost /]#cd /tmp/
[root@localhost tmp]#tar &ndash;zxvf stress-1.0.4.tar.gz</pre>
</div>
<p>4、进入stress-1.0.4文件夹下，编译并安装stress</p>
<div class="cnblogs_code">
<pre>[root@localhost tmp]#cd /tmp/stress-1.0.4/
[root@localhost stress-1.0.4]#./configure
[root@localhost stress-1.0.4]# make
[root@localhost stress-1.0.4]#make install</pre>
</div>
<p>默认安装在：/usr/local/bin/stress<br />二、stress工具使用：<br />命令：taskset &ndash;c 逻辑CPU索引号 stress --timeout 持续时间 --cpu 1<br />参数说明：<br />-c 服务器逻辑CPU的索引号<br />--timeout 对CPU施加压力的持续时间<br />--cpu stress进程数，若值为2，每个stress进程所有消耗的逻辑CPU资源平分<br />如：对索引为0的逻辑cpu施加压力, 持续30秒</p>
<div class="cnblogs_code">
<pre>taskset -c 0 stress --timeout 30 --cpu 1</pre>
</div>
<p>通过top 1可以查看到索引为0的CPU的利用率</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p align="left">按作业指导书安装完系统以后，假设&ldquo;/var&rdquo;分区是系统中最大的分区，按以下方式之</p>
<p align="left">一运行stress（建议使用第三种方式）：</p>
<p align="left">Step9 #cd /var</p>
<p align="left">Step10 #mkdir test //建立测试目录&ldquo;test&rdquo;//</p>
<p align="left">Step11 #cd test</p>
<p align="left">Step12-1 #stress -d 1 --hdd-noclean --hdd-bytes 800k&nbsp;//&nbsp;方式一：&nbsp;主要</p>
<p align="left">测试硬盘，通过mkstemp（）生成800K大小的文件，写入硬盘，对CPU，</p>
<p align="left">内存的使用要求很低&nbsp;//</p>
<p align="left">Step12-2 #stress -c 4 -i 4 -d 1 --hdd-noclean --hdd-bytes 800k</p>
<p align="left">//&nbsp;方式二：增大&ldquo;c&rdquo;，&ldquo;i&rdquo;值会提高CPU的使用率；增大&ldquo;d&rdquo;值会</p>
<p align="left">减少CPU的使用率，而增加对硬盘的数据写入量，但是对内存都要</p>
<p align="left">求不高&nbsp;//</p>
<p align="left">Step12-3 #stress -c 1 -i 1 --vm 6 --vm-bytes 128M -d 2 --hdd-noclean</p>
<p align="left">--hdd-bytes 800k&nbsp;//方式三：增大&ldquo;vm&rdquo;，&ldquo;--vm-bytes&rdquo;</p>
<p align="left">的值或采用选项&ldquo;&mdash;vm-hang&rdquo;都会提高内存的使用率//</p>
<p align="left">运行过程中，您可以通过按&ldquo;Alt+Ctrl+F*&rdquo;进入其他终端，执行&ldquo;df&rdquo;命令，查看磁</p>
<p align="left">盘是否已满（/var是否已满），如果磁盘已满，则程序&ldquo;stress&rdquo;会报错并终止；</p>
<p align="left">执行以下操作，清空测试目录，如果需要；进入到测试目录下，继续运行&ldquo;stress&rdquo;进</p>
<p align="left">行测试：</p>
<p align="left">Step13 #cd</p>
<p align="left">Step14 #chmod -R 755 /var/test</p>
<p align="left">Step15 #rm -R -f /var/test/</p>
<p align="left">Step16 #cd /var/test/</p>
<p align="left">Step17 #stress&nbsp;-c 1 -i 1 --vm 6 --vm-bytes 128M -d 2 --hdd-noclean</p>
<p align="left">--hdd-bytes 800k //重新运行//</p>
<p align="left">出货时，只需要删除相关的测试目录即可，Stress可以保留在系统中，也可以使用以</p>
<p align="left">下方式删除：</p>
<p align="left">Step18：#rm -R -f /usr/local/src/stress-0.18.1/</p>
<p align="left">Step19：#rm -f&nbsp;/usr/local/bin/stress</p>
<p align="left">Step20: #rm -f&nbsp;/usr/local/src/stress-0[1].18.1.tar.gz</p>
<p align="left">完毕</p>
<p align="left"><strong>附：Stress使用说明</strong></p>
<p align="left">Stress&nbsp;选项说明:</p>
<p align="left">-?</p>
<p align="left">--help&nbsp;显示帮助信息</p>
<p align="left">--version&nbsp;显示软件版本信息</p>
<p align="left">-v</p>
<p align="left">--verbose&nbsp;显示详细运行信息</p>
<p align="left">-q</p>
<p align="left">--quiet&nbsp;不显示运行信息</p>
<p align="left">-n</p>
<p align="left">--dry-run&nbsp;显示已经完成的指令执行情况</p>
<p align="left">-t secs</p>
<p align="left">--timeout secs&nbsp;指定运行多少秒</p>
<p align="left">--backoff usecs&nbsp;等待usecs微秒后才开始执行</p>
<p align="left">-c forks</p>
<p align="left">--cpu forks</p>
<p align="left">产生多个处理sqrt（）函数的CPU进程</p>
<p align="left">-i forks</p>
<p align="left">--io forks</p>
<p align="left">产生多个处理sync（）函数的磁盘I/O进程</p>
<p align="left">-m forks</p>
<p align="left">--vm forks</p>
<p align="left">产生多个处理malloc()内存分配函数的进程</p>
<p align="left">--vm-bytes bytes</p>
<p align="left">指定内存的Bytes数，默认值是1（与--vm-hang配合使用）</p>
<p align="left">--vm-hang</p>
<p align="left">指示每个消耗内存的进程在分配到内存后转入休眠状态，与正常的无限分配和释放内存的处理相反，这有利于模拟只有少量内存的机器；例如，下面命令运行时就会</p>
<p align="left">分配到并一直持有256M内存，直到进程被终止；</p>
<p align="left">% stress --vm 2 --vm-bytes 128M --vm-hang</p>
<p align="left">-d forks</p>
<p align="left">--hdd forks</p>
<p align="left">产生多个执行write()函数的进程</p>
<p align="left">--hdd-bytes bytes</p>
<p align="left">指定写的Bytes数，默认是1GB</p>
<p align="left">--hdd-noclean</p>
<p align="left">不要将写入随机ASCII数据的文件Unlink</p>
<p align="left">注意：时间单位可以为秒s，分m，小时h，天d，年y，文件大小单位可以为K，M，G</p>
<p align="left">示例：</p>
<p align="left">一个简单的例子就是你只想给系统一个随机负载，此命令产生13个进程，每个进程都反复不停的计算由rand（）产生随机数的平方根</p>
<p align="left">% stress -c 13</p>
<p align="left">Stress支持很多选项，可以指定仅显示有限的运行信息，以下命令产生1024个进程，仅显示出错信息</p>
<p align="left">% stress --quiet --cpu 1k</p>
<p align="left">为了观察系统何时达到I/O极限，可以使用选项&ldquo;-i&rdquo;，以下指令产生4个进程，每个进程反复调用sync()，sync()用于将内存上的内容写到硬盘上</p>
<p align="left">% stress -i 4</p>
<p align="left">可以在一条指令中使用多个消耗资源的选项，如下指令表示显示运行信息，一分钟后终止运行（13个CPU进程，4个I/O进程）</p>
<p align="left">% stress -c 13 -i 4 --verbose --timeout 1m</p>
<p align="left">你也可以指定向磁盘中写入固定大小的文件，这个文件通过调用mkstemp()产生并保存在当前目录下，默认是文件产生后就被执行unlink（清除）操作，但是你可以使用&ldquo;--hdd-bytes&rdquo;选项将产生的文件全部保存在当前目录下，这会将你的磁盘空间逐步耗尽</p>
<p align="left">% stress -d 1 --hdd-noclean --hdd-bytes 13</p>
<p align="left">可以支持生成大文件</p>
<p align="left">% stress -d 1 --hdd-noclean --hdd-bytes 3G</p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2017-11-17 16:38</span>&nbsp;
<a href="https://www.cnblogs.com/AmilyWilly/">AmilyAmily</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7852318" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(7852318);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 236318, cb_blogApp = 'AmilyWilly', cb_blogUserGuid = '3387f914-2e2a-e511-b908-9dcfd8948a71';
    var cb_entryId = 7852318, cb_entryCreatedDate = '2017-11-17 16:38', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;"></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 AmilyAmily
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>