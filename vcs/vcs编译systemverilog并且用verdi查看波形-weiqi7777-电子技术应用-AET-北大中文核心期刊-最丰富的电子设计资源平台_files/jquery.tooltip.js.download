! function(e) {
  "use strict";
  var t = function(e, t) {
    this.init("tooltip", e, t)
  };
  t.prototype = {
    constructor: t,
    init: function(t, n, i) {
      var o, r, s, a, l;
      for(this.type = t, this.$element = e(n), this.options = this.getOptions(i), this.enabled = !0, s = this.options.trigger.split(" "), l = s.length; l--;) a = s[l], "click" == a ? this.$element.on("click." + this.type, this.options.selector, e.proxy(this.toggle, this)) : "manual" != a && (o = "hover" == a ? "mouseenter" : "focus", r = "hover" == a ? "mouseleave" : "blur", this.$element.on(o + "." + this.type, this.options.selector, e.proxy(this.enter, this)), this.$element.on(r + "." + this.type, this.options.selector, e.proxy(this.leave, this)));
      this.options.selector ? this._options = e.extend({}, this.options, {
        trigger: "manual",
        selector: ""
      }) : this.fixTitle()
    },
    getOptions: function(t) {
      return t = e.extend({}, e.fn[this.type].defaults, this.$element.data(), t), t.delay && "number" == typeof t.delay && (t.delay = {
        show: t.delay,
        hide: t.delay
      }), t
    },
    enter: function(t) {
      var n, i = e.fn[this.type].defaults,
        o = {};
      return this._options && e.each(this._options, function(e, t) {
        i[e] != t && (o[e] = t)
      }, this), n = e(t.currentTarget)[this.type](o).data(this.type), n.options.delay && n.options.delay.show ? (clearTimeout(this.timeout), n.hoverState = "in", void(this.timeout = setTimeout(function() {
        "in" == n.hoverState && n.show()
      }, n.options.delay.show))) : n.show()
    },
    leave: function(t) {
      var n = e(t.currentTarget)[this.type](this._options).data(this.type);
      return this.timeout && clearTimeout(this.timeout), n.options.delay && n.options.delay.hide ? (n.hoverState = "out", void(this.timeout = setTimeout(function() {
        "out" == n.hoverState && n.hide()
      }, n.options.delay.hide))) : n.hide()
    },
    show: function() {
      var t, n, i, o, r, s, a = e.Event("show");
      if(this.hasContent() && this.enabled) {
        if(this.$element.trigger(a), a.isDefaultPrevented()) return;
        switch(t = this.tip(), this.setContent(), this.options.animation && t.addClass("fade"), r = "function" == typeof this.options.placement ? this.options.placement.call(this, t[0], this.$element[0]) : this.options.placement, t.detach().css({
          top: 0,
          left: 0,
          display: "block"
        }), this.options.container ? t.appendTo(this.options.container) : t.insertAfter(this.$element), n = this.getPosition(), i = t[0].offsetWidth, o = t[0].offsetHeight, r) {
        case "bottom":
          s = {
            top: n.top + n.height,
            left: n.left + n.width / 2 - i / 2
          };
          break;
        case "top":
          s = {
            top: n.top - o,
            left: n.left + n.width / 2 - i / 2
          };
          break;
        case "left":
          s = {
            top: n.top + n.height / 2 - o / 2,
            left: n.left - i
          };
          break;
        case "right":
          s = {
            top: n.top + n.height / 2 - o / 2,
            left: n.left + n.width
          }
        }
        this.applyPlacement(s, r), this.$element.trigger("shown")
      }
    },
    applyPlacement: function(e, t) {
      var n, i, o, r, s = this.tip(),
        a = s[0].offsetWidth,
        l = s[0].offsetHeight;
      s.offset(e).addClass(t).addClass("in"), n = s[0].offsetWidth, i = s[0].offsetHeight, "top" == t && i != l && (e.top = e.top + l - i, r = !0), "bottom" == t || "top" == t ? (o = 0, e.left < 0 && (o = -2 * e.left, e.left = 0, s.offset(e), n = s[0].offsetWidth, i = s[0].offsetHeight), this.replaceArrow(o - a + n, n, "left")) : this.replaceArrow(i - l, i, "top"), r && s.offset(e)
    },
    replaceArrow: function(e, t, n) {
      this.arrow().css(n, e ? 50 * (1 - e / t) + "%" : "")
    },
    setContent: function() {
      var e = this.tip(),
        t = this.getTitle();
      e.find(".tooltip-inner")[this.options.html ? "html" : "text"](t), e.removeClass("fade in top bottom left right")
    },
    hide: function() {
      function t() {
        var t = setTimeout(function() {
          n.off(e.support.transition.end).detach()
        }, 500);
        n.one(e.support.transition.end, function() {
          clearTimeout(t), n.detach()
        })
      }
      var n = this.tip(),
        i = e.Event("hide");
      return this.$element.trigger(i), i.isDefaultPrevented() ? void 0 : (n.removeClass("in"), e.support.transition && this.$tip.hasClass("fade") ? t() : n.detach(), this.$element.trigger("hidden"), this)
    },
    fixTitle: function() {
      var e = this.$element;
      (e.attr("title") || "string" != typeof e.attr("data-original-title")) && e.attr("data-original-title", e.attr("title") || "").attr("title", "")
    },
    hasContent: function() {
      return this.getTitle()
    },
    getPosition: function() {
      var t = this.$element[0];
      return e.extend({}, "function" == typeof t.getBoundingClientRect ? t.getBoundingClientRect() : {
        width: t.offsetWidth,
        height: t.offsetHeight
      }, this.$element.offset())
    },
    getTitle: function() {
      var e, t = this.$element,
        n = this.options;
      return e = t.attr("data-original-title") || ("function" == typeof n.title ? n.title.call(t[0]) : n.title)
    },
    tip: function() {
      return this.$tip = this.$tip || e(this.options.template)
    },
    arrow: function() {
      return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow")
    },
    validate: function() {
      this.$element[0].parentNode || (this.hide(), this.$element = null, this.options = null)
    },
    enable: function() {
      this.enabled = !0
    },
    disable: function() {
      this.enabled = !1
    },
    toggleEnabled: function() {
      this.enabled = !this.enabled
    },
    toggle: function(t) {
      var n = t ? e(t.currentTarget)[this.type](this._options).data(this.type) : this;
      n.tip().hasClass("in") ? n.hide() : n.show()
    },
    destroy: function() {
      this.hide().$element.off("." + this.type).removeData(this.type)
    }
  };
  var n = e.fn.tooltip;
  e.fn.tooltip = function(n) {
    return this.each(function() {
      var i = e(this),
        o = i.data("tooltip"),
        r = "object" == typeof n && n;
      o || i.data("tooltip", o = new t(this, r)), "string" == typeof n && o[n]()
    })
  }, e.fn.tooltip.Constructor = t, e.fn.tooltip.defaults = {
    animation: !0,
    placement: "left",
    selector: !1,
    template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: !1,
    container: !1
  }, e.fn.tooltip.noConflict = function() {
    return e.fn.tooltip = n, this
  }
}(window.jQuery);

! function(e) {
  "use strict";
  var t = function(t, i) {
    this.options = i, this.$element = e(t).delegate('[data-dismiss="modal"]', "click.dismiss.modal", e.proxy(this.hide, this)), this.options.remote && this.$element.find(".modal-body").load(this.options.remote)
  };
  t.prototype = {
    constructor: t,
    toggle: function() {
      return this[this.isShown ? "hide" : "show"]()
    },
    show: function() {
      var t = this,
        i = e.Event("show");
      this.$element.trigger(i), this.isShown || i.isDefaultPrevented() || (this.isShown = !0, this.escape(), this.backdrop(function() {
        var i = e.support.transition && t.$element.hasClass("fade");
        t.$element.parent().length || t.$element.appendTo(document.body), t.$element.show(), i && t.$element[0].offsetWidth, t.$element.addClass("in").attr("aria-hidden", !1), t.enforceFocus(), i ? t.$element.one(e.support.transition.end, function() {
          t.$element.focus().trigger("shown")
        }) : t.$element.focus().trigger("shown")
      }))
    },
    hide: function(t) {
      t && t.preventDefault();
      t = e.Event("hide"), this.$element.trigger(t), this.isShown && !t.isDefaultPrevented() && (this.isShown = !1, this.escape(), e(document).off("focusin.modal"), this.$element.removeClass("in").attr("aria-hidden", !0), e.support.transition && this.$element.hasClass("fade") ? this.hideWithTransition() : this.hideModal())
    },
    enforceFocus: function() {
      var t = this;
      e(document).on("focusin.modal", function(e) {
        t.$element[0] === e.target || t.$element.has(e.target).length || t.$element.focus()
      })
    },
    escape: function() {
      var e = this;
      this.isShown && this.options.keyboard ? this.$element.on("keyup.dismiss.modal", function(t) {
        27 == t.which && e.hide()
      }) : this.isShown || this.$element.off("keyup.dismiss.modal")
    },
    hideWithTransition: function() {
      var t = this,
        i = setTimeout(function() {
          t.$element.off(e.support.transition.end), t.hideModal()
        }, 500);
      this.$element.one(e.support.transition.end, function() {
        clearTimeout(i), t.hideModal()
      })
    },
    hideModal: function() {
      var e = this;
      this.$element.hide(), this.backdrop(function() {
        e.removeBackdrop(), e.$element.trigger("hidden")
      })
    },
    removeBackdrop: function() {
      this.$backdrop && this.$backdrop.remove(), this.$backdrop = null
    },
    backdrop: function(t) {
      var i = this.$element.hasClass("fade") ? "fade" : "";
      if(this.isShown && this.options.backdrop) {
        var a = e.support.transition && i;
        if(this.$backdrop = e('<div class="modal-backdrop ' + i + '" />').appendTo(document.body), this.$backdrop.click("static" == this.options.backdrop ? e.proxy(this.$element[0].focus, this.$element[0]) : e.proxy(this.hide, this)), a && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !t) return;
        a ? this.$backdrop.one(e.support.transition.end, t) : t()
      } else !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), e.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one(e.support.transition.end, t) : t()) : t && t()
    }
  };
  var i = e.fn.modal;
  e.fn.modal = function(i) {
    return this.each(function() {
      var a = e(this),
        n = a.data("modal"),
        r = e.extend({}, e.fn.modal.defaults, a.data(), "object" == typeof i && i);
      n || a.data("modal", n = new t(this, r)), "string" == typeof i ? n[i]() : r.show && n.show()
    })
  }, e.fn.modal.defaults = {
    backdrop: !0,
    keyboard: !0,
    show: !0
  }, e.fn.modal.Constructor = t, e.fn.modal.noConflict = function() {
    return e.fn.modal = i, this
  }, e(document).on("click.modal.data-api", '[data-toggle="modal"]', function(t) {
    var i = e(this),
      a = i.attr("href"),
      n = e(i.attr("data-target") || a && a.replace(/.*(?=#[^\s]+$)/, "")),
      r = n.data("modal") ? "toggle" : e.extend({
        remote: !/#/.test(a) && a
      }, n.data(), i.data());
    t.preventDefault(), n.modal(r).one("hide", function() {
      i.focus()
    })
  })
}(window.jQuery)