<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="一、开机启动 对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。 如果你想让该软件开机启动，就执行下面的命令（以httpd." />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Centos7之Systemd(Service文件)详解 - 御用闲人 - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=-oFz8B4m7JhHaZzdTkzPza2oLZNDRR8obnCz6w7OHbU" />
    <link id="MainCss" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin.min.css?v=lp23bZd4RUCf9TGsihJRLSq5M_182P4N8YRMn1A2CWo" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/yyxianren/custom.css?v=SQE516KDien4&#x2B;3/C0jQb7SNlSvs=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/buildtowin/bundle-buildtowin-mobile.min.css?v=ADiCwO2hOTdd5yYidcx7eob7ix2VJI4o_TXjEycTHjs" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/yyxianren/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/yyxianren/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/yyxianren/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=z6JkvKQ7L_bGD-nwJExYzsoFf5qnluqZJru6RsfoZuM"></script>
    <script>
        var currentBlogId = 415305;
        var currentBlogApp = 'yyxianren';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <span id="back-to-top"><a href="#top">返回顶部</a></span>
<span id="top"></span>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/yyxianren/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/yyxianren/">御用闲人</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/yyxianren/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%BE%A1%E7%94%A8%E9%97%B2%E4%BA%BA">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
284&nbsp; </span>
<span id="stats_article_count">文章 - 
0&nbsp; </span>
<span id="stats-comment_count">评论 - 
8</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/yyxianren/p/10677332.html">Centos7之Systemd(Service文件)详解</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
<div id="cnblogs_post_body" class="blogpost-body ">
    <p><!--StartFragment--></p>
<p><strong>一、开机启动</strong></p>
<p>　　对于那些支持 Systemd 的软件，安装的时候，会自动在/usr/lib/systemd/system目录添加一个配置文件。</p>
<p>　　如果你想让该软件开机启动，就执行下面的命令（以httpd.service为例）。</p>
<p>　　　　$ sudo systemctl enable httpd</p>
<p>　　上面的命令相当于在/etc/systemd/system目录添加一个符号链接，指向/usr/lib/systemd/system里面的httpd.service文件。</p>
<p>　　这是因为开机时，Systemd只执行/etc/systemd/system目录里面的配置文件。这也意味着，如果把修改后的配置文件放在该目录，就可以达到覆盖原始配置的效果。</p>
<p><strong>二、启动服务</strong></p>
<p>　　设置开机启动以后，软件并不会立即启动，必须等到下一次开机。如果想现在就运行该软件，那么要执行systemctl start命令。</p>
<p>　　　　$ sudo systemctl start httpd</p>
<p>　　执行上面的命令以后，有可能启动失败，因此要用systemctl status命令查看一下该服务的状态。</p>
<p>　　　　$ sudo systemctl status httpd</p>
<p>　　　　　　httpd.service - The Apache HTTP Server</p>
<p>　　　　　　Loaded: loaded (/usr/lib/systemd/system/httpd.service; enabled)</p>
<p>　　　　　　Active: active (running) since 金 2014-12-05 12:18:22 JST; 7min ago</p>
<p>　　　　　　Main PID: 4349 (httpd)</p>
<p>　　　　　　Status: "Total requests: 1; Current requests/sec: 0; Current traffic: 0 B/sec"</p>
<p>　　　　　　CGroup: /system.slice/httpd.service</p>
<p>　　　　　　　　├─4349 /usr/sbin/httpd -DFOREGROUND</p>
<p>　　　　　　　　├─4350 /usr/sbin/httpd -DFOREGROUND</p>
<p>　　　　　　　　├─4351 /usr/sbin/httpd -DFOREGROUND</p>
<p>　　　　　　　　├─4352 /usr/sbin/httpd -DFOREGROUND</p>
<p>　　　　　　　　├─4353 /usr/sbin/httpd -DFOREGROUND</p>
<p>　　　　　　　　└─4354 /usr/sbin/httpd -DFOREGROUND</p>
<p>　　　　　　12月 05 12:18:22 localhost.localdomain systemd[1]: Starting The Apache HTTP Server...</p>
<p>　　　　　　12月 05 12:18:22 localhost.localdomain systemd[1]: Started The Apache HTTP Server.</p>
<p>　　　　　　12月 05 12:22:40 localhost.localdomain systemd[1]: Started The Apache HTTP Server.</p>
<p>　　上面的输出结果含义如下。</p>
<p>　　　　　　　　Loaded行：配置文件的位置，是否设为开机启动</p>
<p>　　　　　　　　Active行：表示正在运行</p>
<p>　　　　　　　　Main PID行：主进程ID</p>
<p>　　　　　　　　Status行：由应用本身（这里是 httpd ）提供的软件当前状态</p>
<p>　　　　　　　　CGroup块：应用的所有子进程</p>
<p>　　　　　　　　日志块：应用的日志</p>
<p><strong>三、停止服务</strong></p>
<p>　　终止正在运行的服务，需要执行systemctl stop命令。</p>
<p>　　　　$ sudo systemctl stop httpd.service</p>
<p>　　有时候，该命令可能没有响应，服务停不下来。这时候就不得不"杀进程"了，向正在运行的进程发出kill信号。</p>
<p>　　　　$ sudo systemctl kill httpd.service</p>
<p>　　此外，重启服务要执行systemctl restart命令。</p>
<p>　　　　$ sudo systemctl restart httpd.service</p>
<p><strong>四、读懂配置文件</strong></p>
<p>　　一个服务怎么启动，完全由它的配置文件决定。下面就来看，配置文件有些什么内容。</p>
<p>　　前面说过，配置文件主要放在/usr/lib/systemd/system目录，也可能在/etc/systemd/system目录。找到配置文件以后，使用文本编辑器打开即可。</p>
<p>　　systemctl cat命令可以用来查看配置文件，下面以sshd.service文件为例，它的作用是启动一个 SSH 服务器，供其他用户以 SSH 方式登录。</p>
<p>　　　　$ systemctl cat sshd.service</p>
<p>　　　　　　[Unit]</p>
<p>　　　　　　Description=OpenSSH server daemon</p>
<p>　　　　　　Documentation=man:sshd(8) man:sshd_config(5)</p>
<p>　　　　　　After=network.target sshd-keygen.service</p>
<p>　　　　　　Wants=sshd-keygen.service</p>
<p>　　　　　　[Service]</p>
<p>　　　　　　EnvironmentFile=/etc/sysconfig/sshd</p>
<p>　　　　　　ExecStart=/usr/sbin/sshd -D $OPTIONS</p>
<p>　　　　　　ExecReload=/bin/kill -HUP $MAINPID</p>
<p>　　　　　　Type=simple</p>
<p>　　　　　　KillMode=process</p>
<p>　　　　　　Restart=on-failure</p>
<p>　　　　　　RestartSec=42s</p>
<p>　　　　　　[Install]</p>
<p>　　　　　　WantedBy=multi-user.target</p>
<p>　　可以看到，配置文件分成几个区块，每个区块包含若干条键值对。</p>
<p>　　下面依次解释每个区块的内容。</p>
<p><strong>五、 [Unit] 区块：启动顺序与依赖关系。</strong></p>
<p>　　Unit区块的Description字段给出当前服务的简单描述，Documentation字段给出文档位置。</p>
<p>　　接下来的设置是启动顺序和依赖关系，这个比较重要。</p>
<p>　　　　After字段：表示如果network.target或sshd-keygen.service需要启动，那么sshd.service应该在它们之后启动。</p>
<p>　　相应地，还有一个Before字段，定义sshd.service应该在哪些服务之前启动。</p>
<p>　　注意，After和Before字段只涉及启动顺序，不涉及依赖关系。</p>
<p>　　举例来说，某 Web 应用需要 postgresql 数据库储存数据。在配置文件中，它只定义要在 postgresql 之后启动，而没有定义依赖 postgresql 。上线后，由于某种原因，postgresql 需要重新启动，在停止服务期间，该 Web 应用就会无法建立数据库连接。</p>
<p>　　设置依赖关系，需要使用Wants字段和Requires字段。</p>
<p>　　　　Wants字段：表示sshd.service与sshd-keygen.service之间存在"弱依赖"关系，即如果"sshd-keygen.service"启动失败或停止运行，不影响sshd.service继续执行。</p>
<p>　　　　Requires字段则表示"强依赖"关系，即如果该服务启动失败或异常退出，那么sshd.service也必须退出。</p>
<p>　　注意，Wants字段与Requires字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。</p>
<p><strong>六、[Service] 区块：启动行为</strong></p>
<p>　　Service区块定义如何启动当前服务。</p>
<p>　　6.1 启动命令</p>
<p>　　　　许多软件都有自己的环境参数文件，该文件可以用EnvironmentFile字段读取。</p>
<p>　　　　EnvironmentFile字段：指定当前服务的环境参数文件。该文件内部的key=value键值对，可以用$key的形式，在当前配置文件中获取。</p>
<p>　　　　上面的例子中，sshd 的环境参数文件是/etc/sysconfig/sshd。</p>
<p>　　　　配置文件里面最重要的字段是ExecStart。</p>
<p>　　　　ExecStart字段：定义启动进程时执行的命令。</p>
<p>　　　　上面的例子中，启动sshd，执行的命令是/usr/sbin/sshd -D $OPTIONS，其中的变量$OPTIONS就来自EnvironmentFile字段指定的环境参数文件。</p>
<p>　　　　与之作用相似的，还有如下这些字段。</p>
<p>　　　　　　ExecReload字段：重启服务时执行的命令</p>
<p>　　　　　　ExecStop字段：停止服务时执行的命令</p>
<p>　　　　　　ExecStartPre字段：启动服务之前执行的命令</p>
<p>　　　　　　ExecStartPost字段：启动服务之后执行的命令</p>
<p>　　　　　　ExecStopPost字段：停止服务之后执行的命令</p>
<p>　　请看下面的例子。</p>
<p>　　　　[Service]</p>
<p>　　　　　　ExecStart=/bin/echo execstart1</p>
<p>　　　　　　ExecStart=</p>
<p>　　　　　　ExecStart=/bin/echo execstart2</p>
<p>　　　　　　ExecStartPost=/bin/echo post1</p>
<p>　　　　　　ExecStartPost=/bin/echo post2</p>
<p>　　上面这个配置文件，第二行ExecStart设为空值，等于取消了第一行的设置，运行结果如下。</p>
<p>　　　　execstart2</p>
<p>　　　　post1</p>
<p>　　　　post2</p>
<p>　　所有的启动设置之前，都可以加上一个连词号（-），表示"抑制错误"，即发生错误的时候，不影响其他命令的执行。比如，EnvironmentFile=-/etc/sysconfig/sshd（注意等号后面的那个连词号），就表示即使/etc/sysconfig/sshd文件不存在，也不会抛出错误。</p>
<p>6.2 启动类型</p>
<p>　　Type字段定义启动类型。它可以设置的值如下。</p>
<p style="margin-left: 60px;">simple（默认值）：ExecStart字段启动的进程为主进程</p>
<p style="margin-left: 60px;">forking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程</p>
<p style="margin-left: 60px;">oneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务</p>
<p style="margin-left: 60px;">dbus：类似于simple，但会等待 D-Bus 信号后启动</p>
<p style="margin-left: 60px;">notify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</p>
<p style="margin-left: 60px;">idle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混合</p>
<p>　　下面是一个oneshot的例子，笔记本电脑启动时，要把触摸板关掉，配置文件可以这样写。</p>
<p style="margin-left: 60px;">[Unit]</p>
<p style="margin-left: 60px;">Description=Switch-off Touchpad</p>
<p style="margin-left: 60px;">[Service]</p>
<p style="margin-left: 60px;">Type=oneshot</p>
<p style="margin-left: 60px;">ExecStart=/usr/bin/touchpad-off</p>
<p style="margin-left: 60px;">[Install]</p>
<p style="margin-left: 60px;">WantedBy=multi-user.target</p>
<p>　　上面的配置文件，启动类型设为oneshot，就表明这个服务只要运行一次就够了，不需要长期运行。</p>
<p>　　如果关闭以后，将来某个时候还想打开，配置文件修改如下。</p>
<p style="margin-left: 60px;">[Unit]</p>
<p style="margin-left: 60px;">Description=Switch-off Touchpad</p>
<p style="margin-left: 60px;">[Service]</p>
<p style="margin-left: 60px;">Type=oneshot</p>
<p style="margin-left: 60px;">ExecStart=/usr/bin/touchpad-off start</p>
<p style="margin-left: 60px;">ExecStop=/usr/bin/touchpad-off stop</p>
<p style="margin-left: 60px;">RemainAfterExit=yes</p>
<p style="margin-left: 60px;">[Install]</p>
<p style="margin-left: 60px;">WantedBy=multi-user.target</p>
<p>　　上面配置文件中，RemainAfterExit字段设为yes，表示进程退出以后，服务仍然保持执行。这样的话，一旦使用systemctl stop命令停止服务，ExecStop指定的命令就会执行，从而重新开启触摸板。</p>
<p>6.3 重启行为</p>
<p>　　Service区块有一些字段，定义了重启行为。</p>
<p>　　KillMode字段：定义 Systemd 如何停止 sshd 服务。</p>
<p>　　上面这个例子中，将KillMode设为process，表示只停止主进程，不停止任何sshd 子进程，即子进程打开的 SSH session 仍然保持连接。这个设置不太常见，但对 sshd 很重要，否则你停止服务的时候，会连自己打开的 SSH session 一起杀掉。</p>
<p>　　KillMode字段可以设置的值如下。</p>
<p style="margin-left: 60px;">control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉</p>
<p style="margin-left: 60px;">process：只杀主进程</p>
<p style="margin-left: 60px;">mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</p>
<p style="margin-left: 60px;">none：没有进程会被杀掉，只是执行服务的 stop 命令。</p>
<p>　　接下来是Restart字段。</p>
<p>　　Restart字段：定义了 sshd 退出后，Systemd 的重启方式。</p>
<p>　　上面的例子中，Restart设为on-failure，表示任何意外的失败，就将重启sshd。如果 sshd 正常停止（比如执行systemctl stop命令），它就不会重启。</p>
<p>　　Restart字段可以设置的值如下。</p>
<p style="margin-left: 60px;">no（默认值）：退出后不会重启</p>
<p style="margin-left: 60px;">on-success：只有正常退出时（退出状态码为0），才会重启</p>
<p style="margin-left: 60px;">on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启</p>
<p style="margin-left: 60px;">on-abnormal：只有被信号终止和超时，才会重启</p>
<p style="margin-left: 60px;">on-abort：只有在收到没有捕捉到的信号终止时，才会重启</p>
<p style="margin-left: 60px;">on-watchdog：超时退出，才会重启</p>
<p style="margin-left: 60px;">always：不管是什么退出原因，总是重启</p>
<p>　　对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal。</p>
<p>　　最后是RestartSec字段。</p>
<p>　　RestartSec字段：表示 Systemd 重启服务之前，需要等待的秒数。上面的例子设为等待42秒。</p>
<p><strong>七、[Install] 区块</strong></p>
<p style="margin-left: 30px;">Install区块，定义如何安装这个配置文件，即怎样做到开机启动。</p>
<p style="margin-left: 30px;">WantedBy字段：表示该服务所在的 Target。</p>
<p style="margin-left: 30px;">Target的含义是服务组，表示一组服务。WantedBy=multi-user.target指的是，sshd 所在的 Target 是multi-user.target。</p>
<p style="margin-left: 30px;">这个设置非常重要，因为执行systemctl enable sshd.service命令时，sshd.service的一个符号链接，就会放在/etc/systemd/system目录下面的multi-user.target.wants子目录之中。</p>
<p style="margin-left: 30px;">Systemd 有默认的启动 Target。</p>
<p style="margin-left: 60px;">$ systemctl get-default</p>
<p style="margin-left: 60px;">multi-user.target</p>
<p style="margin-left: 30px;">上面的结果表示，默认的启动 Target 是multi-user.target。在这个组里的所有服务，都将开机启动。这就是为什么systemctl enable命令能设置开机启动的原因。</p>
<p style="margin-left: 30px;">使用 Target 的时候，systemctl list-dependencies命令和systemctl isolate命令也很有用。</p>
<p style="margin-left: 60px;"># 查看 multi-user.target 包含的所有服务</p>
<p style="margin-left: 60px;">$ systemctl list-dependencies multi-user.target</p>
<p style="margin-left: 60px;"># 切换到另一个 target</p>
<p style="margin-left: 60px;"># shutdown.target 就是关机状态</p>
<p style="margin-left: 60px;">$ sudo systemctl isolate shutdown.target</p>
<p>　　一般来说，常用的 Target 有两个：一个是multi-user.target，表示多用户命令行状态；另一个是graphical.target，表示图形用户状态，它依赖于multi-user.target。官方文档有一张非常清晰的 Target 依赖关系图。</p>
<p><strong>八、Target 的配置文件</strong></p>
<p>　　Target 也有自己的配置文件。</p>
<p style="margin-left: 60px;">$ systemctl cat multi-user.target</p>
<p style="margin-left: 60px;">[Unit]</p>
<p style="margin-left: 60px;">Description=Multi-User System</p>
<p style="margin-left: 60px;">Documentation=man:systemd.special(7)</p>
<p style="margin-left: 60px;">Requires=basic.target</p>
<p style="margin-left: 60px;">Conflicts=rescue.service rescue.target</p>
<p style="margin-left: 60px;">After=basic.target rescue.service rescue.target</p>
<p style="margin-left: 60px;">AllowIsolate=yes</p>
<p>　　注意，Target 配置文件里面没有启动命令。</p>
<p>　　上面输出结果中，主要字段含义如下。</p>
<p style="margin-left: 60px;">Requires字段：要求basic.target一起运行。</p>
<p style="margin-left: 60px;">Conflicts字段：冲突字段。如果rescue.service或rescue.target正在运行，multi-user.target就不能运行，反之亦然。</p>
<p style="margin-left: 60px;">After：表示multi-user.target在basic.target 、 rescue.service、 rescue.target之后启动，如果它们有启动的话。</p>
<p style="margin-left: 60px;">AllowIsolate：允许使用systemctl isolate命令切换到multi-user.target。</p>
<p><strong>九、修改配置文件后重启</strong></p>
<p>　　修改配置文件以后，需要重新加载配置文件，然后重新启动相关服务。</p>
<p style="margin-left: 60px;"># 重新加载配置文件</p>
<p style="margin-left: 60px;">$ sudo systemctl daemon-reload</p>
<p style="margin-left: 60px;"># 重启相关服务</p>
<p style="margin-left: 60px;">$ sudo systemctl restart foobar</p>
<p><!--EndFragment--></p>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-04-09 15:43</span>&nbsp;
<a href="https://www.cnblogs.com/yyxianren/">御用闲人</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=10677332" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(10677332);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 415305, cb_blogApp = 'yyxianren', cb_blogUserGuid = '2240a721-6d09-4726-9784-08d581a6bd57';
    var cb_entryId = 10677332, cb_entryCreatedDate = '2019-04-09 15:43', cb_postType = 1; 
    loadViewCount(cb_entryId);
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 御用闲人
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>