<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="简介 lsof(list open files)是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>linux lsof命令详解 - 星火spark - 博客园</title>
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=KCO3_f2W_TC__-jZ7phSnmoFkQuWMJH2yAgA16eE3eY" />
    <link id="MainCss" rel="stylesheet" href="/skins/coffee/bundle-coffee.min.css?v=KPz7rj-c2sTAV1_ck1aDmbZcuCG3KBhyLnfvzf6nn94" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/coffee/bundle-coffee-mobile.min.css?v=na9bpAY4yh7uEWCcrXj3vfJM3VBse8YtU6-5fUUQPz0" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/sparkbj/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/sparkbj/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/sparkbj/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=98Fvfd6UZH20B_MF08daNaODjSu879MVR9RHmyvWAlg"></script>
    <script>
        var currentBlogId = 128821;
        var currentBlogApp = 'sparkbj';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'coffee';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/sparkbj/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/sparkbj/">星火spark</a>
</h1>
<h2>

</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/sparkbj/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E6%98%9F%E7%81%ABspark">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="https://www.cnblogs.com/sparkbj/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/sparkbj/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
108&nbsp;
文章- 
101&nbsp;
评论- 
11&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2" href="https://www.cnblogs.com/sparkbj/p/7161669.html">linux lsof命令详解</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body ">
    <h1><strong><span style="font-size: 18pt;">简介</span></strong></h1>
<p>lsof(list open files)是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p>
<p>&nbsp;</p>
<h1><strong><span style="font-size: 18pt;">输出信息含义</span></strong></h1>
<p>在终端下输入lsof即可显示系统打开的文件，因为 lsof 需要访问核心内存和各种文件，所以必须以 root 用户的身份运行它才能够充分地发挥其功能。</p>
<p>直接输入lsof部分输出为:</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></span></div>
<pre>COMMAND     PID        USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME init          <span style="color: #800080;">1        root  cwd       DIR                <span style="color: #800080;">8,<span style="color: #800080;">1     <span style="color: #800080;">4096          <span style="color: #800080;">2 / init          <span style="color: #800080;">1        root  rtd       DIR                <span style="color: #800080;">8,<span style="color: #800080;">1     <span style="color: #800080;">4096          <span style="color: #800080;">2 / init          <span style="color: #800080;">1        root  txt       REG                <span style="color: #800080;">8,<span style="color: #800080;">1   <span style="color: #800080;">150584     <span style="color: #800080;">654127 /sbin/init udevd       <span style="color: #800080;">415        root    <span style="color: #800080;">0u      CHR                <span style="color: #800080;">1,<span style="color: #800080;">3      0t0       <span style="color: #800080;">6254 /dev/<span style="color: #0000ff;">null udevd       <span style="color: #800080;">415        root    <span style="color: #800080;">1u      CHR                <span style="color: #800080;">1,<span style="color: #800080;">3      0t0       <span style="color: #800080;">6254 /dev/<span style="color: #0000ff;">null udevd       <span style="color: #800080;">415        root    <span style="color: #800080;">2u      CHR                <span style="color: #800080;">1,<span style="color: #800080;">3      0t0       <span style="color: #800080;">6254 /dev/<span style="color: #0000ff;">null udevd       <span style="color: #800080;">690        root  mem       REG                <span style="color: #800080;">8,<span style="color: #800080;">1    <span style="color: #800080;">51736     <span style="color: #800080;">302589 /lib/x86_64-linux-gnu/libnss_files-<span style="color: #800080;">2.13.so syslogd    <span style="color: #800080;">1246      syslog    2w      REG                <span style="color: #800080;">8,<span style="color: #800080;">1    <span style="color: #800080;">10187     <span style="color: #800080;">245418 /<span style="color: #0000ff;">var/log/auth.log syslogd    <span style="color: #800080;">1246      syslog    3w      REG                <span style="color: #800080;">8,<span style="color: #800080;">1    <span style="color: #800080;">10118     <span style="color: #800080;">245342 /<span style="color: #0000ff;">var/log/syslog dd         <span style="color: #800080;">1271        root    0r      REG                <span style="color: #800080;">0,<span style="color: #800080;">3        <span style="color: #800080;">0 <span style="color: #800080;">4026532038 /proc/kmsg dd         <span style="color: #800080;">1271        root    1w     FIFO               <span style="color: #800080;">0,<span style="color: #800080;">15      0t0        <span style="color: #800080;">409 /run/klogd/kmsg dd         <span style="color: #800080;">1271        root    <span style="color: #800080;">2u      CHR                <span style="color: #800080;">1,<span style="color: #800080;">3      0t0       <span style="color: #800080;">6254 /dev/<span style="color: #0000ff;">null</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></span></div>
</div>
<p>每行显示一个打开的文件，若不指定条件默认将显示所有进程打开的所有文件。</p>
<p>lsof输出各列信息的意义如下：</p>
<p>COMMAND：进程的名称 PID：进程标识符</p>
<p>USER：进程所有者</p>
<p>FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等 TYPE：文件类型，如DIR、REG等</p>
<p>DEVICE：指定磁盘的名称</p>
<p>SIZE：文件的大小</p>
<p>NODE：索引节点（文件在磁盘上的标识）</p>
<p>NAME：打开文件的确切名称</p>
<p>FD 列中的文件描述符cwd 值表示应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改,txt 类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序。</p>
<p>其次数值表示应用程序的文件描述符，这是打开该文件时返回的一个整数。如上的最后一行文件/dev/initctl，其文件描述符为 10。u 表示该文件被打开并处于读取/写入模式，而不是只读 &reg; 或只写 (w) 模式。同时还有大写 的W 表示该应用程序具有对整个文件的写锁。该文件描述符用于确保每次只能打开一个应用程序实例。初始打开每个应用程序时，都具有三个文件描述符，从 0 到 2，分别表示标准输入、输出和错误流。所以大多数应用程序所打开的文件的 FD 都是从 3 开始。</p>
<p>与 FD 列相比，Type 列则比较直观。文件和目录分别称为 REG 和 DIR。而CHR 和 BLK，分别表示字符和块设备；或者 UNIX、FIFO 和 IPv4，分别表示 UNIX 域套接字、先进先出 (FIFO) 队列和网际协议 (IP) 套接字。</p>
<p>&nbsp;</p>
<h1><strong><span style="font-size: 18pt;">常用参数</span></strong></h1>
<p>lsof语法格式是： lsof ［options］ filename</p>
<div class="cnblogs_code">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></span></div>
<pre>lsof abc.txt 显示开启文件abc.txt的进程 lsof -c abc 显示abc进程现在打开的文件 lsof -c -p <span style="color: #800080;">1234 列出进程号为1234的进程所打开的文件 lsof -g gid 显示归属gid的进程情况 lsof +d /usr/local/ 显示目录下被进程开启的文件 lsof +D /usr/local/ 同上，但是会搜索目录下的目录，时间较长 lsof -d <span style="color: #800080;">4 显示使用fd为4的进程 lsof -i 用以显示符合条件的进程情况 lsof -i[<span style="color: #800080;">46] [protocol][@hostname|hostaddr][:service|port] <span style="color: #800080;">  46 --&gt; IPv4 or IPv6   protocol --&gt; TCP or UDP   hostname --&gt; Internet host name   hostaddr --&gt; IPv4地址   service --&gt; /etc/service中的 service name (可以不止一个)   port --&gt; 端口号 (可以不止一个)</span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></span></div>
</div>
<p>&nbsp;</p>
<h1><strong><span style="font-size: 18pt;">lsof使用实例</span></strong></h1>
<p><strong>查找谁在使用文件系统</strong></p>
<p>在卸载文件系统时，如果该文件系统中有任何打开的文件，操作通常将会失败。那么通过lsof可以找出那些进程在使用当前要卸载的文件系统，如下： # lsof /GTES11/ COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME bash 4208 root cwd DIR 3,1 4096 2 /GTES11/ vim 4230 root cwd DIR 3,1 4096 2 /GTES11/ 在这个示例中，用户root正在其/GTES11目录中进行一些操作。一个 bash是实例正在运行，并且它当前的目录为/GTES11，另一个则显示的是vim正在编辑/GTES11下的文件。要成功地卸载/GTES11，应该在通知用户以确保情况正常之后，中止这些进程。 这个示例说明了应用程序的当前工作目录非常重要，因为它仍保持着文件资源，并且可以防止文件系统被卸载。这就是为什么大部分守护进程（后台进程）将它们的目录更改为根目录、或服务特定的目录（如 sendmail 示例中的 /var/spool/mqueue）的原因，以避免该守护进程阻止卸载不相关的文件系统。</p>
<p>&nbsp;</p>
<p><strong>恢复删除的文件</strong></p>
<p>当Linux计算机受到入侵时，常见的情况是日志文件被删除，以掩盖攻击者的踪迹。管理错误也可能导致意外删除重要的文件，比如在清理旧日志时，意外地删除了数据库的活动事务日志。有时可以通过lsof来恢复这些文件。 当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。 在/proc 目录下，其中包含了反映内核和进程树的各种文件。/proc目录挂载的是在内存中所映射的一块区域，所以这些文件和目录并不存在于磁盘中，因此当我们对这些文件进行读取和写入时，实际上是在从内存中获取相关信息。大多数与 lsof 相关的信息都存储于以进程的 PID 命名的目录中，即 /proc/1234 中包含的是 PID 为 1234 的进程的信息。每个进程目录中存在着各种文件，它们可以使得应用程序简单地了解进程的内存空间、文件描述符列表、指向磁盘上的文件的符号链接和其他系统信息。lsof 程序使用该信息和其他关于内核内部状态的信息来产生其输出。所以lsof 可以显示进程的文件描述符和相关的文件名等信息。也就是我们通过访问进程的文件描述符可以找到该文件的相关信息。 当系统中的某个文件被意外地删除了，只要这个时候系统中还有进程正在访问该文件，那么我们就可以通过lsof从/proc目录下恢复该文件的内容。 假如由于误操作将/var/log/messages文件删除掉了，那么这时要将/var/log/messages文件恢复的方法如下： 首先使用lsof来查看当前是否有进程打开/var/logmessages文件，如下： # lsof |grep /var/log/messages syslogd 1283 root 2w REG 3,3 5381017 1773647 /var/log/messages (deleted) 从上面的信息可以看到 PID 1283（syslogd）打开文件的文件描述符为 2。同时还可以看到/var/log/messages已经标记被删除了。因此我们可以在 /proc/1283/fd/2 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下： # head -n 10 /proc/1283/fd/2 Aug 4 13:50:15 holmes86 syslogd 1.4.1: restart. Aug 4 13:50:15 holmes86 kernel: klogd 1.4.1, log source = /proc/kmsg started. Aug 4 13:50:15 holmes86 kernel: Linux version 2.6.22.1-8 (root@everestbuilder.linux-ren.org) (gcc version 4.2.0) #1 SMP Wed Jul 18 11:18:32 EDT 2007 Aug 4 13:50:15 holmes86 kernel: BIOS-provided physical RAM map: Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 0000000000000000 - 000000000009f000 (usable) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 000000000009f000 - 00000000000a0000 (reserved) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 0000000000100000 - 000000001f7d3800 (usable) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 000000001f7d3800 - 0000000020000000 (reserved) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 00000000e0000000 - 00000000f0007000 (reserved) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 00000000f0008000 - 00000000f000c000 (reserved) 从上面的信息可以看出，查看 /proc/8663/fd/15 就可以得到所要恢复的数据。如果可以通过文件描述符查看相应的数据，那么就可以使用 I/O 重定向将其复制到文件中，如: cat /proc/1283/fd/2 &gt; /var/log/messages 对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。</p>
<p>&nbsp;</p>
<p>可以列出被<a target="_self"><span style="text-decoration: underline;"><strong>进程</strong></span></a>所<a target="_self"><span style="text-decoration: underline;"><strong>打开</strong></span></a>的<a target="_self"><span style="text-decoration: underline;"><strong>文件</strong></span></a>的信息。被打开的文件可以是</p>
<p>1.普通的文件，2.目录 &nbsp;3.网络文件系统的文件，4.字符设备文件 &nbsp;5.(函数)共享库 &nbsp;6.管道，命名管道&nbsp;7.符号链接</p>
<p>8.底层的socket字流，网络socket，<a target="_self"><span style="text-decoration: underline;"><strong>unix</strong></span></a>域名socket</p>
<p>9.在<a target="_self"><span style="text-decoration: underline;"><strong>linux</strong></span></a>里面，大部分的东西都是被当做文件的&hellip;..还有其他很多</p>
<p><strong>怎样使用lsof</strong></p>
<p>这里主要用案例的形式来介绍lsof 命令的<a target="_self"><span style="text-decoration: underline;"><strong>使用</strong></span></a></p>
<p><strong>1.列出所有打开的文件:</strong></p>
<p>lsof</p>
<p>备注: 如果不加任何参数，就会打开所有被打开的文件，建议加上一下参数来具体定位</p>
<p><strong>2. <a target="_self"><span style="text-decoration: underline;"><strong>查看</strong></span></a>谁正在使用某个文件</strong></p>
<p>lsof &nbsp; /filepath/file</p>
<p><strong>3.递归查看某个目录的文件信息</strong></p>
<p>lsof +D /filepath/filepath2/</p>
<p>备注: 使用了+D，对应目录下的所有子目录和文件都会被列出</p>
<p><strong>4. 比使用+D选项，遍历查看某个目录的所有文件信息 的方法</strong></p>
<p>lsof | grep &lsquo;/filepath/filepath2/&rsquo;</p>
<p><strong>5. 列出某个用户打开的文件信息</strong></p>
<p>lsof &nbsp;-u username</p>
<p>备注: -u 选项，u其实是user的缩写</p>
<p><strong>6. 列出某个程序所打开的文件信息</strong></p>
<p><strong>lsof -c mysql</strong></p>
<p>备注: -c 选项将会列出所有以mysql开头的程序的文件，其实你也可以写成<strong>lsof | grep mysql,</strong>但是第一种方法明显比第二种方法要少打几个字符了</p>
<p><strong>7. 列出多个程序多打开的文件信息</strong></p>
<p>lsof -c mysql -c apache</p>
<p><strong>8. 列出某个用户以及某个程序所打开的文件信息</strong></p>
<p>lsof -u <a target="_self"><span style="text-decoration: underline;"><strong>test</strong></span></a> -c mysql</p>
<p><strong>9. 列出除了某个用户外的被打开的文件信息</strong></p>
<p>lsof &nbsp; -u ^root</p>
<p>备注：^这个符号在用户名之前，将会把是root用户打开的进程不让显示</p>
<p><strong>10. 通过某个进程号显示该进行打开的文件</strong></p>
<p>lsof -p 1</p>
<p><strong>11. 列出多个进程号对应的文件信息</strong></p>
<p>lsof -p 123,456,789</p>
<p><strong>12. 列出除了某个进程号，其他进程号所打开的文件信息</strong></p>
<p>lsof -p ^1</p>
<p><strong>13 . 列出所有的网络连接</strong></p>
<p><strong>lsof -i</strong></p>
<p><strong>14. 列出所有tcp 网络连接信息</strong></p>
<p>lsof &nbsp;-i tcp</p>
<p><strong>15. 列出所有udp网络连接信息</strong></p>
<p>lsof &nbsp;-i udp</p>
<p><strong>16. 列出谁在使用某个端口</strong></p>
<p>lsof -i :3306</p>
<p><strong>17. 列出谁在使用某个特定的udp端口</strong></p>
<p>lsof -i udp:55</p>
<p><strong>特定的tcp端口</strong></p>
<p>lsof -i tcp:80</p>
<p><strong>18. 列出某个用户的所有活跃的网络端口</strong></p>
<p>lsof &nbsp;-a -u test -i</p>
<p><strong>19. 列出所有网络文件系统</strong></p>
<p>lsof -N</p>
<p><strong>20.域名socket文件</strong></p>
<p>lsof -u</p>
<p><strong>21.某个用户组所打开的文件信息</strong></p>
<p>lsof -g 5555</p>
<p><strong>22. 根据文件描述列出对应的文件信息</strong></p>
<p>lsof -d description(like 2)</p>
<p><strong>23. 根据文件描述范围列出文件信息</strong></p>
<p>lsof -d 2-3</p>
<p>&nbsp;</p>
<p><strong>实用命令</strong></p>
<div class="cnblogs_code" style="width: 94.16%; height: 157px;">
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></span></div>
<pre>lsof `which httpd` <span style="color: #008000;">//<span style="color: #008000;">那个进程在使用apache的可执行文件<span style="color: #008000;"> lsof /etc/passwd <span style="color: #008000;">//<span style="color: #008000;">那个进程在占用/etc/passwd<span style="color: #008000;"> lsof /dev/hda6 <span style="color: #008000;">//<span style="color: #008000;">那个进程在占用hda6<span style="color: #008000;"> lsof /dev/cdrom <span style="color: #008000;">//<span style="color: #008000;">那个进程在占用光驱<span style="color: #008000;"> lsof -c sendmail <span style="color: #008000;">//<span style="color: #008000;">查看sendmail进程的文件使用情况<span style="color: #008000;"> lsof -c courier -u ^zahn <span style="color: #008000;">//<span style="color: #008000;">显示出那些文件被以courier打头的进程打开，但是并不属于用户zahn<span style="color: #008000;"> lsof -p <span style="color: #800080;">30297 <span style="color: #008000;">//<span style="color: #008000;">显示那些文件被pid为30297的进程打开<span style="color: #008000;"> lsof -D /tmp 显示所有在/tmp文件夹中打开的instance和文件的进程。但是symbol文件并不在列<br />lsof -u1000 <span style="color: #008000;">//<span style="color: #008000;">查看uid是100的用户的进程的文件使用情况<span style="color: #008000;"> lsof -utony <span style="color: #008000;">//<span style="color: #008000;">查看用户tony的进程的文件使用情况<span style="color: #008000;"> lsof -u^tony <span style="color: #008000;">//<span style="color: #008000;">查看不是用户tony的进程的文件使用情况(^是取反的意思)<span style="color: #008000;"> lsof -i <span style="color: #008000;">//<span style="color: #008000;">显示所有打开的端口<span style="color: #008000;"> lsof -i:<span style="color: #800080;">80 <span style="color: #008000;">//<span style="color: #008000;">显示所有打开80端口的进程<span style="color: #008000;"> lsof -i -U <span style="color: #008000;">//<span style="color: #008000;">显示所有打开的端口和UNIX domain文件<span style="color: #008000;"> lsof -i UDP@[url]www.akadia.com:<span style="color: #800080;">123 <span style="color: #008000;">//<span style="color: #008000;">显示那些进程打开了到www.akadia.com的UDP的123(ntp)端口的链接<span style="color: #008000;"> lsof -i tcp@ohaha.ks.edu.tw:ftp -r <span style="color: #008000;">//<span style="color: #008000;">不断查看目前ftp连接的情况(-r，lsof会永远不断的执行，直到收到中断信号,+r，lsof会一直执行，直到没有档案被显示,缺省是15s刷新)<span style="color: #008000;"> lsof -i tcp@ohaha.ks.edu.tw:ftp -n <span style="color: #008000;">//<span style="color: #008000;">lsof -n 不将IP转换为hostname，缺省是不加上-n参数</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre>
<div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a title="复制代码"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" /></a></span></div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
<div class="cnblogs_code_toolbar">&nbsp;</div>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2017-07-13 17:29</span>&nbsp;
<a href="https://www.cnblogs.com/sparkbj/">星火spark</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=7161669" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(7161669);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 128821, cb_blogApp = 'sparkbj', cb_blogUserGuid = '34d1db50-b603-e211-aa3f-842b2b196315';
    var cb_entryId = 7161669, cb_entryCreatedDate = '2017-07-13 17:29', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>

<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <script async="async" src="https://www.googletagservices.com/tag/js/gpt.js"></script>
    <script>
        var googletag = googletag || {};
        googletag.cmd = googletag.cmd || [];
    </script>
    <script>
        googletag.cmd.push(function () {
            googletag.defineSlot("/1090369/C1", [300, 250], "div-gpt-ad-1546353474406-0").addService(googletag.pubads());
            googletag.defineSlot("/1090369/C2", [468, 60], "div-gpt-ad-1539008685004-0").addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    </script>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id="div-gpt-ad-1546353474406-0" style="height:250px; width:300px;"></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id="div-gpt-ad-1539008685004-0" style="height:60px; width:468px;">
            <script>
                if (new Date() >= new Date(2018, 9, 13)) {
                    googletag.cmd.push(function () { googletag.display("div-gpt-ad-1539008685004-0"); });
                }
            </script>
        </div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverAdT2();
        deliverAdC1();
        deliverAdC2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 星火spark
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    
</body>
</html>