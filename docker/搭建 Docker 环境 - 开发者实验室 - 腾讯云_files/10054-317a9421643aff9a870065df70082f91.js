/* This lds file is generated by lds-builder, please do not modify. Modify the markdown source instead */
(function() {
"use strict";

var window, document, top, self, parent, screen, navigator, location, $, jQuery, addEventListener;
function output(runtime, command) {
    var isNot = false;
    var assert = {
        contains: function () {
            var keywords = [].slice.call(arguments);
            if (runtime.vars.cvmOsType !== 'Windows') {
                var greps = keywords.map(function (keyword) {
                    if (!keyword)
                        return '';
                    return ' | grep -P "' + keyword.replace(/\"/g, "\\\"") + '"';
                }).join('');
                return runtime.cvm.execute(command + greps + ' -c').then(function (result) {
                    var contain = parseInt(result, 10) > 0;
                    return isNot ? !contain : contain;
                }, function () { return false; });
            }
            else {
                var findstr = keywords.map(function (keyword) {
                    if (!keyword)
                        return '';
                    return ' | findstr /r "' + keyword + '"';
                }).join('');
                command = command + findstr + ' | findstr /n "."';
                return runtime.cvm.execute(command).then(function (result) {
                    result = result.replace(command, "").trim();
                    var contain = result.length && result.charAt(0) === '1';
                    return isNot ? !contain : contain;
                }, function () { return false; });
            }
        },
        not: function () {
            isNot = true;
            return assert;
        }
    };
    return assert;
}

function otherwise(value) {
    return function (ok) { return ok || value; };
}

var lab = registerLab();

lab.title("搭建 Docker 环境");
lab.stage("stage-1", function(stage) {
	stage.title("安装与配置 Docker");
	stage.time("10min ~ 20min");
	stage.step("step-1", function(step) {
		step.title("安装 Docker");
		step.info("首先安装 Docker 必要依赖包 ：");
		step.code("yum install -y yum-utils device-mapper-persistent-data lvm2");
		step.info("由于自带 yum 没有 Docker-CE 所以我们需要先增加 docker repo：");
		step.code("yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo");
		step.info("用 yum 安装 Docker：");
		step.code("yum install -y docker-ce");
		step.info("直接yum安装，安装成功后查看版本");
		step.code("docker -v");
		step.info("启动docker");
		step.code("service docker start");
		step.info("设置开机启动");
		step.code("chkconfig docker on");
		step.check(function(runtime) {
			return output(runtime, "ls /usr/bin/")
				.contains("docker")
				.then(otherwise("Docker 未安装"));
		});
		step.check(function(runtime) {
			return output(runtime, "ps -aux")
				.contains("[d]ocker")
				.then(otherwise("Docker 未启动"));
		});
	});
	stage.step("step-2", function(step) {
		step.title("配置 Docker");
		step.info("因为国内访问 Docker Hub 较慢, 可以使用腾讯云提供的国内镜像源, 加速访问 Docker Hub");
		step.info("依次执行以下命令");
		step.code("echo \"OPTIONS='--registry-mirror=https://mirror.ccs.tencentyun.com'\" >> /etc/sysconfig/docker");
		step.code("systemctl daemon-reload");
		step.code("service docker restart");
		step.check(function(runtime) {
			return output(runtime, "cat /etc/sysconfig/docker")
				.contains("registry-mirror=https://mirror.ccs.tencentyun.com")
				.then(otherwise("Docker 源未修改"));
		});
	});
});
lab.stage("stage-2", function(stage) {
	stage.title("Docker 的简单操作");
	stage.time("10min ~ 20min");
	stage.step("step-1", function(step) {
		step.title("下载镜像");
		step.info("下载一个官方的 CentOS 镜像到本地");
		step.code("docker pull centos");
		step.info("下载好的镜像就会出现在镜像列表里");
		step.code("docker images");
		step.check(function(runtime) {
			return output(runtime, "docker images ")
				.contains("centos")
				.then(otherwise("未下载 CentOS 镜像"));
		});
	});
	stage.step("step-2", function(step) {
		step.title("运行容器");
		step.info("这时我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。 ");
		step.info("生成一个 centos 镜像为模板的容器并使用 bash shell");
		step.code("docker run -it centos /bin/bash");
		step.info("这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。");
		step.info("在容器内执行任意命令, 不会影响到宿主机, 如下");
		step.code("mkdir -p /data/simple_docker");
		step.info("可以看到 /data 目录下已经创建成功了 simple_docker 文件夹");
		step.code("ls /data");
		step.info("退出容器");
		step.code("exit");
		step.info("查看宿主机的 /data 目录, 并没有 simple_docker 文件夹, 说明容器内的操作不会影响到宿主机");
		step.code("ls /data");
	});
	stage.step("step-3", function(step) {
		step.title("保存容器");
		step.info("查看所有的容器信息， 能获取容器的id");
		step.code("docker ps -a");
		step.info("然后执行如下命令[:question][icon]，保存镜像：");
		step.code("docker commit -m=\"备注\" 你的CONTAINER_ID 你的IMAGE");
		step.bubble("icon", "请自行将 -m 后面的信息改成自己的容器的信息");
	});
	stage.step("step-4", function(step) {
		step.title("大功告成！");
		step.info("恭喜你结束了 Docker 的教程并学会了 Docker 的一些基本操作, 接下来, 您可以购买并体验腾讯云提供的 Docker 服务");
	});
});

})();