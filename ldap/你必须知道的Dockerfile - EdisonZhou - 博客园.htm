<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="本篇已加入《.NET Core on K8S学习实践系列文章索引》，可以点击查看更多容器化技术相关系列文章。 一、关于Dockerfile 在Docker中创建镜像最常用的方式，就是使用Dockerf" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>你必须知道的Dockerfile - EdisonZhou - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="https://www.cnblogs.com/css/blog-common.min.css" />
    <link id="MainCss" rel="stylesheet" href="https://www.cnblogs.com/skins/buildtowin/bundle-buildtowin.min.css" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/edisonchou/custom.css?v=QKPOBQsTpnikSi3nHZ0Y0vRAvGg=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="https://www.cnblogs.com/skins/buildtowin/bundle-buildtowin-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/edisonchou/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/edisonchou/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/edisonchou/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="https://www.cnblogs.com/js/blog-common.min.js"></script>
    <script>
        var currentBlogId = 110406;
        var currentBlogApp = 'edisonchou';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'BuildtoWin';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <script>loadPageBeginHtml();</script>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/edisonchou/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/edisonchou/">Edison Zhou</a>
</h1>
<h2>
坚持学习，善于总结，乐于分享...
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/edisonchou/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/EdisonZhou">
联系</a></li>
<li>

<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			
			<span id="stats_post_count">随笔 - 
397&nbsp; </span>
<span id="stats_article_count">文章 - 
1&nbsp; </span>
<span id="stats-comment_count">评论 - 
2571</span>

			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/edisonchou/p/dockerfile_inside_introduction.html">
    <span>你必须知道的Dockerfile</span>
    


</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                
    <div id="cnblogs_post_description" style="display: none">
        <img class="desc_img abstract" width="105" height="110" src="https://images2018.cnblogs.com/blog/381412/201807/381412-20180726221105300-1650411740.png" alt="Docker">在Docker中创建镜像最常用的方式，就是使用Dockerfile。Dockerfile是一个Docker镜像的描述文件，我们可以理解成火箭发射的A、B、C、D…的步骤。Dockerfile其内部包含了一条条的指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。本篇已加入《.NET Core on K8S学习实践系列文章索引》，可以点击查看更多容器化技术相关系列文章。
    </div>
<div id="cnblogs_post_body" class="blogpost-body ">
    <p>本篇已加入《<a href="https://www.cnblogs.com/edisonchou/p/aspnet_core_k8s_artcles_index.html" target="_blank">.NET Core on K8S学习实践系列文章索引</a>》，可以点击查看更多容器化技术相关系列文章。</p>
<h1>一、关于Dockerfile</h1>
<p>　　在Docker中创建镜像最常用的方式，就是使用Dockerfile。Dockerfile是一个Docker镜像的描述文件，我们可以理解成火箭发射的A、B、C、D&hellip;的步骤。Dockerfile其内部<strong>包含了一条条的指令</strong>，<strong>每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建</strong>。</p>
<p style="text-align: center;"><img style="width: 60%; border: 2px solid #ddd; border-radius: 5px;" src="https://img2018.cnblogs.com/blog/381412/201908/381412-20190811220705871-2130672519.png" alt="" /></p>
<p>　　一个Dockerfile的示例如下所示：</p>
<div class="cnblogs_code">
<pre><span style="color: #000000;">#基于centos镜像
FROM centos

#维护人的信息
MAINTAINER The CentOS Project </span>&lt;<span style="color: #800080;">303323496</span>@qq.com&gt;<span style="color: #000000;">

#安装httpd软件包
RUN </span><span style="color: #0000ff;">yum</span> -<span style="color: #000000;">y update
RUN </span><span style="color: #0000ff;">yum</span> -y <span style="color: #0000ff;">install</span><span style="color: #000000;"> httpd

#开启80端口
EXPOSE </span><span style="color: #800080;">80</span><span style="color: #000000;">

#复制网站首页文件至镜像中web站点下
ADD index.html </span>/var/www/html/<span style="color: #000000;">index.html

#复制该脚本至镜像中，并修改其权限
ADD run.</span><span style="color: #0000ff;">sh</span> /run.<span style="color: #0000ff;">sh</span><span style="color: #000000;">
RUN </span><span style="color: #0000ff;">chmod</span> <span style="color: #800080;">775</span> /run.<span style="color: #0000ff;">sh</span><span style="color: #000000;">

#当启动容器时执行的脚本文件
CMD [</span><span style="color: #800000;">"</span><span style="color: #800000;">/run.sh</span><span style="color: #800000;">"</span>]</pre>
</div>
<p>　　由上可知，Dockerfile结构大致分为四个部分：</p>
<p>　　（1）基础镜像信息</p>
<p>　　（2）维护者信息</p>
<p>　　（3）镜像操作指令</p>
<p>　　（4）容器启动时执行指令。</p>
<p>　　Dockerfile每行支持一条指令，每条指令可带多个参数，支持使用以#号开头的注释。下面会对上面使用到的一些常用指令做一些介绍。</p>
<h1>二、Dockerfile常用指令</h1>
<p>首先，来一张通俗易懂的<strong>全景图</strong>：</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;" src="https://img2018.cnblogs.com/blog/450977/201905/450977-20190512115951746-136143052.png" alt="" width="974" height="571" /></p>
<h2>2.1 FROM</h2>
<p>　　指明构建的新镜像是来自于哪个基础镜像，例如：</p>
<div class="cnblogs_code">
<pre>FROM centos:<span style="color: #800080;">6</span></pre>
</div>
<h2>2.2 MAINTAINER</h2>
<p>　　指明镜像维护着及其联系方式（一般是邮箱地址），例如：</p>
<div class="cnblogs_code">
<pre>MAINTAINER Edison Zhou &lt;edisonchou@hotmail.com&gt;</pre>
</div>
<p>　　不过，MAINTAINER并不推荐使用，更推荐使用LABEL来指定镜像作者，例如：</p>
<div class="cnblogs_code">
<pre>LABEL maintainer=<span style="color: #800000;">"</span><span style="color: #800000;">edisonzhou.cn</span><span style="color: #800000;">"</span></pre>
</div>
<h2>2.3 RUN</h2>
<p>　　构建镜像时运行的Shell命令，例如：</p>
<div class="cnblogs_code">
<pre>RUN ["yum", "install", "httpd"]<br />RUN yum install httpd</pre>
</div>
<p>　　又如，我们在使用微软官方ASP.NET Core Runtime镜像时往往会加上以下RUN命令，弥补无法在默认镜像下使用Drawing相关接口的缺憾：</p>
<div class="cnblogs_code">
<p>FROM microsoft/dotnet:2.2.1-aspnetcore-runtime<br />RUN apt-get update<br />RUN apt-get install -y libgdiplus<br />RUN apt-get install -y libc6-dev<br />RUN ln -s /usr/lib/libgdiplus.so /lib/x86_64-linux-gnu/libgdiplus.so</p>




</div>
<h2>2.4 CMD</h2>
<p>　　启动容器时执行的Shell命令，例如：</p>
<div class="cnblogs_code">
<pre>CMD ["-C", "/start.sh"<span>] <br />CMD ["/usr/sbin/sshd", "-D"<span>] <br />CMD /usr/sbin/sshd -D</span></span></pre>
</div>
<h2>2.5 EXPOSE</h2>
<p>　　声明容器运行的服务端口，例如：</p>
<div class="cnblogs_code">
<pre>EXPOSE <span style="color: #800080;">80 </span><span style="color: #800080;">443</span></pre>
</div>
<h2>2.6 ENV</h2>
<p>　　设置环境内环境变量，例如：</p>
<div class="cnblogs_code">
<pre>ENV MYSQL_ROOT_PASSWORD <span style="color: #800080;">123456<br /><span style="color: #000000;">ENV JAVA_HOME /usr/local/jdk1.8.0_45</span></span></pre>
</div>
<h2>2.7 ADD</h2>
<p>　　拷贝文件或目录到镜像中，例如：</p>
<div class="cnblogs_code">
<pre>ADD &lt;src&gt;...&lt;dest&gt;<span style="color: #000000;">
ADD html.</span><span style="color: #0000ff;">tar</span>.gz /var/www/<span style="color: #000000;">html
ADD https:</span><span style="color: #008000;">//</span><span style="color: #008000;">xxx.com/html.tar.gz /var/www/html</span></pre>
</div>
<p>　　<em><strong>PS：</strong></em>如果是URL或压缩包，会自动下载或自动解压。</p>
<h2>2.8 COPY</h2>
<p>　　拷贝文件或目录到镜像中，用法同ADD，只是不支持自动下载和解压，例如：</p>
<div class="cnblogs_code">
<pre>COPY ./start.<span style="color: #0000ff;">sh</span> /start.<span style="color: #0000ff;">sh</span></pre>
</div>
<h2>2.9 ENTRYPOINT</h2>
<p>　　启动容器时执行的Shell命令，同CMD类似，只是由ENTRYPOINT启动的程序<strong>不会被docker&nbsp;run命令行指定的参数所覆盖</strong>，而且，<strong>这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序</strong>，例如：</p>
<div class="cnblogs_code">
<pre>ENTRYPOINT [<span style="color: #800000;">"</span><span style="color: #800000;">/bin/bash</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">-C</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">/start.sh</span><span style="color: #800000;">"</span><span style="color: #000000;">]
ENTRYPOINT </span>/bin/bash -C <span style="color: #800000;">'</span><span style="color: #800000;">/start.sh</span><span style="color: #800000;">'</span></pre>
</div>
<p>　　<em><strong>PS：</strong></em>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效。</p>
<h2>2.10 VOLUME</h2>
<p>　　指定容器挂载点到宿主机自动生成的目录或其他容器，例如：</p>
<div class="cnblogs_code">
<pre>VOLUME [<span style="color: #800000;">"</span><span style="color: #800000;">/var/lib/mysql</span><span style="color: #800000;">"</span>]</pre>
</div>
<p>　　<em><strong>PS：</strong></em>一般不会在Dockerfile中用到，更常见的还是在docker run的时候指定-v数据卷。</p>
<h2>2.11 USER</h2>
<p>　　为RUN、CMD和ENTRYPOINT执行Shell命令指定运行用户，例如：</p>
<div class="cnblogs_code">
<pre>USER &lt;user&gt;[:&lt;usergroup&gt;<span style="color: #000000;">]
USER </span>&lt;UID&gt;[:&lt;UID&gt;<span style="color: #000000;">]
USER edisonzhou</span></pre>
</div>
<h2>2.12 WORKDIR</h2>
<p>　　为RUN、CMD、ENTRYPOINT以及COPY和AND设置工作目录，例如：</p>
<div class="cnblogs_code">
<pre>WORKDIR /data</pre>
</div>
<h2>2.13 HEALTHCHECK</h2>
<p>　　告诉Docker如何测试容器以检查它是否仍在工作，即健康检查，例如：</p>
<div class="cnblogs_code">
<pre>HEALTHCHECK --interval=5m --timeout=3s --retries=<span style="color: #800080;">3</span><span style="color: #000000;"> \
    CMD curl </span>-f http:/localhost/ || exit <span style="color: #800080;">1</span></pre>
</div>
<p>　　其中，一些选项的说明：</p>
<ul>
<li>&nbsp;--interval=DURATION (default: 30s)：每隔多长时间探测一次，默认30秒</li>
<li>&nbsp;-- timeout= DURATION (default: 30s)：服务响应超时时长，默认30秒</li>
<li>&nbsp;--start-period= DURATION (default: 0s)：服务启动多久后开始探测，默认0秒</li>
<li>&nbsp;--retries=N (default: 3)：认为检测失败几次为宕机，默认3次</li>
</ul>
<p>　　一些返回值的说明：</p>
<ul>
<li>&nbsp;0：容器成功是健康的，随时可以使用</li>
<li>&nbsp;1：不健康的容器无法正常工作</li>
<li>&nbsp;2：保留不使用此退出代码</li>
</ul>
<h2>2.14 ARG</h2>
<p>　　在构建镜像时，指定一些参数，例如：</p>
<div class="cnblogs_code">
<pre>FROM centos:<span style="color: #800080;">6</span><span style="color: #000000;">
ARG user # ARG user</span>=<span style="color: #000000;">root
USER $user</span></pre>
</div>
<p>　　这时，我们在docker build时可以带上自定义参数user了，如下所示：</p>
<div class="cnblogs_code">
<pre>docker build --build-arg user=edisonzhou Dockerfile .</pre>
</div>
<h1>三、综合Dockerfile案例</h1>
<p>　　下面是一个Java Web应用的镜像Dockerfile，综合使用到了上述介绍中最常用的几个命令：</p>
<div class="cnblogs_code">
<pre>FROM centos:<span style="color: #800080;">7</span><span style="color: #000000;">
MAINTANIER www.edisonchou.com

ADD jdk</span>-8u45-linux-x64.<span style="color: #0000ff;">tar</span>.gz /usr/<span style="color: #000000;">local
ENV JAVA_HOME </span>/usr/local/jdk1.<span style="color: #800080;">8</span><span style="color: #000000;">.0_45

ADD apache</span>-tomcat-<span style="color: #800080;">8.0</span>.<span style="color: #800080;">46</span>.<span style="color: #0000ff;">tar</span>.gz /usr/<span style="color: #000000;">local
COPY server.xml </span>/usr/local/apache-tomcat-<span style="color: #800080;">8.0</span>.<span style="color: #800080;">46</span>/<span style="color: #000000;">conf

RUN </span><span style="color: #0000ff;">rm</span> -f /usr/local<span style="color: #008000;">/*</span><span style="color: #008000;">.tar.gz

WORKDIR /usr/local/apache-tomcat-8.0.46
EXPOSE 8080
ENTRYPOINT ["./bin/catalina.sh", "run"]</span></pre>
</div>
<p>　　有了Dockerfile，就可以创建镜像了：</p>
<div class="cnblogs_code">
<pre>docker build -t tomcat:v1 .</pre>
</div>
<p>　　最后，可以通过以下命令创建容器：</p>
<div class="cnblogs_code">
<pre>docker run -itd --name=tomcate -p <span style="color: #800080;">8080</span>:<span style="color: #800080;">8080</span><span style="color: #000000;"> \
    </span>-v /app/webapps/:/usr/local/apache-tomcat-<span style="color: #800080;">8.0</span>.<span style="color: #800080;">46</span>/webapps/<span style="color: #000000;"> \
    tomcat:v1</span></pre>
</div>
<h1>四、小结</h1>
<p>　　本文介绍了Dockerfile的背景和组成，以及最常用的一些Dockerfile命令，最后介绍了一个综合使用了Dockefile指令的一个案例来说明Dockerfile的应用。</p>
<h1>参考资料</h1>
<div>（1）李振良，《<a href="https://edu.51cto.com/center/course/lesson/index?id=347202" target="_blank">Dockerfile常用指令详解</a>》</div>
<div>（2）CloudMan，《<a href="https://item.jd.com/16936307278.html" target="_blank">每天5分钟玩转Docker容器技术</a>》</div>
<div>（3）阿龙，《<a href="https://www.cnblogs.com/along21/p/10243761.html">Dockerfile详解</a>》</div>
<div>（4）MaAiQiang，《<a href="https://blog.51cto.com/10316297/2160524" target="_blank">通过Dockerfile创建Docker镜像</a>》</div>
<p>&nbsp;</p>
<div id="Copyright">
<p>作者：<a title="author" href="http://www.edisonchou.cn" target="_blank">周旭龙</a></p>
<p>出处：<a title="from" href="https://edisonchou.cnblogs.com" target="_blank">https://edisonchou.cnblogs.com</a></p>
<p>本文版权归作者和博客园共有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文链接。</p>
</div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2019-08-11 23:31</span>&nbsp;
<a href="https://www.cnblogs.com/edisonchou/">EdisonZhou</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=11336865" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(11336865);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 110406, cb_blogApp = 'edisonchou', cb_blogUserGuid = '07e29612-5364-e111-aa3f-842b2b196315';
    var cb_entryId = 11336865, cb_entryCreatedDate = '2019-08-11 23:31', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>
	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 EdisonZhou
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <!-- 自定义地址栏图标 Start -->
<script type="text/javascript" language="javascript">
　　//Setting ico for cnblogs
　　var linkObject = document.createElement('link');
　　linkObject.rel = "shortcut icon";
　　linkObject.href = "https://files.cnblogs.com/files/edisonchou/edisonchou.ico";
　　document.getElementsByTagName("head")[0].appendChild(linkObject);
</script>
<!-- 自定义地址栏图标 End -->
    </div>
</body>
</html>
