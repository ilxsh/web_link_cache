<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin" />
    <meta property="og:description" content="什么是dockerfile? Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。 docker" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Dockerfile文件详解 - 百衲本 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.ico?v=20200522" type="image/x-icon" />
    
    <link rel="stylesheet" href="https://www.cnblogs.com/css/blog-common.min.css" />
    <link id="MainCss" rel="stylesheet" href="https://www.cnblogs.com/skins/coffee/bundle-coffee.min.css" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/panwenbin-logs/custom.css?v=UyLfF3F9bawhGvJBXurvNtKeakg=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="https://www.cnblogs.com/skins/coffee/bundle-coffee-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/panwenbin-logs/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/panwenbin-logs/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/panwenbin-logs/wlwmanifest.xml" />
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="https://www.cnblogs.com/js/blog-common.min.js"></script>
    <script>
        var currentBlogId = 272534;
        var currentBlogApp = 'panwenbin-logs';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var skinName = 'coffee';
    </script>
    
    
    
</head>
<body>
    <a name="top"></a>
    <div id="page_begin_html">
        <div id="blogTitle">
<div class="title">
<a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/panwenbin-logs/">&nbsp;&nbsp;&nbsp;&nbsp;Mr. Pan</a>
</div>
<div class="subtitle">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Run, Mr. Pan~</div>
</div>
    </div>
    
<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a href="https://www.cnblogs.com/panwenbin-logs/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/panwenbin-logs/">Mr. Pan</a>
</h1>
<h2>
I can because i think i can.
</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="navigator">
			
<ul id="navList">
	<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
	<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/panwenbin-logs/">
首页</a>
</li>
	<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
	<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E7%99%BE%E8%A1%B2%E6%9C%AC">
联系</a></li>
	<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
	<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/panwenbin-logs/rss/">
订阅</a>
	
<a id="blog_nav_rss_image" href="https://www.cnblogs.com/panwenbin-logs/rss/">
    <img src="/skins/coffee/images/xml.gif" alt="订阅" />
</a></li>
</ul>



			<div class="blogStats">
				
				<!--done-->
随笔- 
157&nbsp;
文章- 
14&nbsp;
评论- 
100&nbsp;



				
			</div><!--end: blogStats -->
		</div><!--end: navigator 博客导航栏 -->
		<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class = "postTitle">
			
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/panwenbin-logs/p/8007348.html">
    <span>Dockerfile文件详解</span>
    


</a>

		</h1>
		<div class="clear"></div>
		<div class="postBody">
			
<div id="cnblogs_post_body" class="blogpost-body ">
    <h2><span style="font-family: 'courier new', courier;">什么是dockerfile?</span></h2>
<p><span style="font-family: 'courier new', courier;">Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取<code>Dockerfile</code>中的指令自动生成映像。</span></p>
<p><span style="font-family: 'courier new', courier;"><code>docker build</code>命令用于从Dockerfile构建映像。可以在<code>docker build</code>命令中使用<code>-f</code>标志指向文件系统中任何位置的Dockerfile。</span></p>
<p><span style="font-family: 'courier new', courier;">例：</span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;">docker build -f /path/to/a/Dockerfile</span></pre>
</div>
<h2><span style="font-family: 'courier new', courier;">Dockerfile的基本结构</span></h2>
<p><span style="font-family: 'courier new', courier;">Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，&rsquo;#&rsquo; 为 Dockerfile 中的注释。</span></p>
<h2 id="h2-dockerfile-"><span style="font-family: 'courier new', courier;">Dockerfile文件说明</span></h2>
<p><span style="font-family: 'courier new', courier;">Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是<em>FROM</em>。</span><span style="font-family: 'courier new', courier;">一个声明以<code>＃</code>字符开头则被视为注释。可以在Docker文件中使用<code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code>等指令。</span></p>
<p><strong><span style="font-family: 'courier new', courier;">在这里列出了一些常用的指令。</span></strong></p>
<p id="from"><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">FROM：</span><span style="color: #0000ff;">指定基础镜像，必须为第一个命令</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
　　FROM </span>&lt;image&gt;<span style="color: #000000;">
　　FROM </span>&lt;image&gt;:&lt;tag&gt;<span style="color: #000000;">
　　FROM </span>&lt;image&gt;@&lt;digest&gt;</span><br /><span style="font-family: 'courier new', courier; color: #00ffff;">示例：</span><br /><span style="font-family: 'courier new', courier;">　　<span class="hljs-selector-tag">FROM <span class="hljs-selector-tag">mysql<span class="hljs-selector-pseudo">:5.6<br /></span></span></span><span style="color: #008000;">注：</span></span><br /><span style="font-family: 'courier new', courier;">　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">MAINTAINER:&nbsp;</span><span style="color: #0000ff;">维护者信息</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    MAINTAINER </span>&lt;name&gt;<span style="color: #000000;"><span style="color: #00ffff;">
示例：</span>
    MAINTAINER Jasper Xu
    MAINTAINER sorex@</span><span style="color: #800080;">163</span><span style="color: #000000;">.com
    MAINTAINER Jasper Xu </span>&lt;sorex@<span style="color: #800080;">163</span>.com&gt;</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">RUN：</span><span style="color: #0000ff;">构建镜像时执行的命令</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;">RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：
<strong>shell执行</strong>
<span style="color: #ff00ff;">格式：</span>
    RUN </span>&lt;command&gt;<span style="color: #000000;"><strong>
exec执行</strong>
<span style="color: #ff00ff;">格式：</span>
    RUN [</span><span style="color: #800000;">"</span><span style="color: #800000;">executable</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">param1</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">param2</span><span style="color: #800000;">"</span><span style="color: #000000;">]
<span style="color: #00ffff;">示例：</span>
    RUN [</span><span style="color: #800000;">"</span><span style="color: #800000;">executable</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">param1</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">param2</span><span style="color: #800000;">"</span><span style="color: #000000;">]
    RUN apk update
    RUN [</span><span style="color: #800000;">"</span><span style="color: #800000;">/etc/execfile</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">arg1</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">arg1</span><span style="color: #800000;">"</span><span style="color: #000000;">]
<span style="color: #008000;">注：</span><br />　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定</span>--no-cache参数，如：docker build --no-cache</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">ADD</span>：<span style="color: #0000ff;">将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    ADD </span>&lt;src&gt;... &lt;dest&gt;<span style="color: #000000;">
    ADD [</span><span style="color: #800000;">"</span><span style="color: #800000;">&lt;src&gt;</span><span style="color: #800000;">"</span>,... <span style="color: #800000;">"</span><span style="color: #800000;">&lt;dest&gt;</span><span style="color: #800000;">"</span><span style="color: #000000;">] 用于支持包含空格的路径
<span style="color: #00ffff;">示例：</span>
    ADD hom</span>* /mydir/          # 添加所有以<span style="color: #800000;">"</span><span style="color: #800000;">hom</span><span style="color: #800000;">"</span><span style="color: #000000;">开头的文件
    ADD hom</span>?.txt /mydir/      # ? 替代一个单字符,例如：<span style="color: #800000;">"</span><span style="color: #800000;">home.txt</span><span style="color: #800000;">"</span><span style="color: #000000;">
    ADD test relativeDir</span>/     # 添加 <span style="color: #800000;">"</span><span style="color: #800000;">test</span><span style="color: #800000;">"</span> 到 `WORKDIR`/relativeDir/<span style="color: #000000;">
    ADD test </span>/absoluteDir/    # 添加 <span style="color: #800000;">"</span><span style="color: #800000;">test</span><span style="color: #800000;">"</span> 到 /absoluteDir/</span></pre>
</div>
<p><strong><span style="font-family: 'courier new', courier;"><span style="color: #ff0000; font-size: 18pt;">COPY：</span><span style="color: #0000ff;">功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</span></span></strong></p>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">CMD：</span><span style="color: #0000ff;">构建容器后调用，也就是在容器启动时才进行调用。</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    CMD [</span><span style="color: #800000;">"</span><span style="color: #800000;">executable</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">param1</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">param2</span><span style="color: #800000;">"</span><span style="color: #000000;">] (执行可执行文件，优先)
    CMD [</span><span style="color: #800000;">"</span><span style="color: #800000;">param1</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">param2</span><span style="color: #800000;">"</span><span style="color: #000000;">] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)
    CMD command param1 param2 (执行shell内部命令)
<span style="color: #00ffff;">示例：</span>
    CMD echo </span><span style="color: #800000;">"</span><span style="color: #800000;">This is a test.</span><span style="color: #800000;">"</span> | wc -<span style="color: #000000;">
    CMD [</span><span style="color: #800000;">"</span><span style="color: #800000;">/usr/bin/wc</span><span style="color: #800000;">"</span>,<span style="color: #800000;">"</span><span style="color: #800000;">--help</span><span style="color: #800000;">"</span>]</span><br /><span style="font-family: 'courier new', courier; color: #008000;">注：</span><br /><span style="font-family: 'courier new', courier;"> 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">ENTRYPOINT：</span><span style="color: #0000ff;">配置容器，使其可执行化。配合CMD可省去"application"，只使用参数。</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    ENTRYPOINT [</span><span style="color: #800000;">"</span><span style="color: #800000;">executable</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">param1</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">param2</span><span style="color: #800000;">"</span><span style="color: #000000;">] (可执行文件, 优先)
    ENTRYPOINT command param1 param2 (shell内部命令)
<span style="color: #00ffff;">示例：</span>
    FROM ubuntu
    ENTRYPOINT [</span><span style="color: #800000;">"</span><span style="color: #800000;">top</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">-b</span><span style="color: #800000;">"</span><span style="color: #000000;">]
    CMD [</span><span style="color: #800000;">"</span><span style="color: #800000;">-c</span><span style="color: #800000;">"</span>]</span><br /><span style="font-family: 'courier new', courier; color: #008000;">注：</span><br /><span style="font-family: 'courier new', courier;">　　　ENTRYPOINT与CMD非常类似，不同的是通过<code>docker run</code>执行的命令不会覆盖ENTRYPOINT，而<code>docker run</code>命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">LABEL：</span><span style="color: #0000ff;">用于为镜像添加元数据</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    LABEL </span>&lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt;<span style="color: #000000;"> ...
<span style="color: #00ffff;">示例：</span>
　　LABEL version</span>=<span style="color: #800000;">"</span><span style="color: #800000;">1.0</span><span style="color: #800000;">"</span> description=<span style="color: #800000;">"</span><span style="color: #800000;">这是一个Web服务器</span><span style="color: #800000;">"</span> by=<span style="color: #800000;">"</span><span style="color: #800000;">IT笔录</span><span style="color: #800000;">"</span><span style="color: #000000;"><span style="color: #008000;">
注：</span>
　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</span></span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">ENV：</span><span style="color: #0000ff;">设置环境变量</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    ENV </span>&lt;key&gt; &lt;value&gt;  #&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量<span style="color: #000000;">
    ENV </span>&lt;key&gt;=&lt;value&gt;<span style="color: #000000;"> ...  #可以设置多个变量，每个变量为一个"&lt;key&gt;=&lt;value&gt;"的键值对，如果&lt;key&gt;中包含空格，可以使用\来进行转义，也可以通过""来进行标示；另外，反斜线也可以用于续行
<span style="color: #00ffff;">示例：</span>
    ENV myName John Doe
    ENV myDog Rex The Dog
    ENV myCat=fluffy<br /></span></span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">EXPOSE：</span><span style="color: #0000ff;">指定于外界交互的端口</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    EXPOSE </span>&lt;port&gt; [&lt;port&gt;<span style="color: #000000;">...]
<span style="color: #00ffff;">示例：</span>
    EXPOSE </span><span style="color: #800080;">80</span> <span style="color: #800080;">443</span><span style="color: #000000;">
    EXPOSE </span><span style="color: #800080;">8080<br />    EXPOSE 11211/tcp 11211/udp<br /><span style="color: #008000;">注：</span><br /><span style="color: #000000;">　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在<code>docker run</code>运行容器时通过-p来发布这些端口，或通过<code>-P</code>参数来发布EXPOSE导出的所有端口</span></span></span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">VOLUME：</span><span style="color: #0000ff;">用于指定持久化目录</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    VOLUME [</span><span style="color: #800000;">"</span><span style="color: #800000;">/path/to/dir</span><span style="color: #800000;">"</span><span style="color: #000000;">]
<span style="color: #00ffff;">示例：</span>
    VOLUME [</span><span style="color: #800000;">"</span><span style="color: #800000;">/data</span><span style="color: #800000;">"</span><span style="color: #000000;">]
    VOLUME [</span><span style="color: #800000;">"</span><span style="color: #800000;">/var/www</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">/var/log/apache2</span><span style="color: #800000;">"</span>, <span style="color: #800000;">"</span><span style="color: #800000;">/etc/apache2</span><span style="color: #800000;">"<br /><span style="color: #000000;"><span style="color: #008000;">注：</span><br />　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</span><br /></span></span></pre>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #008080;">1</span> <span style="color: #000000;">卷可以容器间共享和重用
</span><span style="color: #008080;">2</span> <span style="color: #000000;">容器并不一定要和其它容器共享卷
</span><span style="color: #008080;">3</span> <span style="color: #000000;">修改卷后会立即生效
</span><span style="color: #008080;">4</span> <span style="color: #000000;">对卷的修改不会对镜像产生影响
</span><span style="color: #008080;">5</span> 卷会一直存在，直到没有任何容器在使用它</span></pre>
</div>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">WORKDIR：</span><span style="color: #0000ff;">工作目录，类似于cd命令</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    WORKDIR </span>/path/to/<span style="color: #000000;">workdir
<span style="color: #00ffff;">示例：</span>
    WORKDIR </span>/a  (这时工作目录为/<span style="color: #000000;">a)
    WORKDIR b  (这时工作目录为</span>/a/<span style="color: #000000;">b)
    WORKDIR c  (这时工作目录为</span>/a/b/c)</span><br /><span style="font-family: 'courier new', courier; color: #008000;">注：</span><br /><span style="font-family: 'courier new', courier;">　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用<code>docker run</code>运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><span style="font-size: 18pt;"><strong><span style="color: #ff0000;">USER:</span></strong></span><strong><span style="color: #0000ff;">指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</span></strong></span></p>
<div class="cnblogs_code">
<p><span style="font-family: 'courier new', courier; color: #ff00ff;">&nbsp;格式:</span><br /><span style="font-family: 'courier new', courier;">　　USER user</span><br /><span style="font-family: 'courier new', courier;">　　USER user:group</span><br /><span style="font-family: 'courier new', courier;">　　USER uid</span><br /><span style="font-family: 'courier new', courier;">　　USER uid:gid</span><br /><span style="font-family: 'courier new', courier;">　　USER user:gid</span><br /><span style="font-family: 'courier new', courier;">　　USER uid:group</span></p>
<p><span style="font-family: 'courier new', courier; color: #00ffff;">&nbsp;示例：</span><br /><span style="font-family: 'courier new', courier;">    　　USER www</span></p>
<p><span style="font-family: 'courier new', courier; color: #008000;">&nbsp;注：</span></p>
<p><span style="font-family: 'courier new', courier;">　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过<code>docker run</code>运行容器时，可以通过-u参数来覆盖所指定的用户。</span></p>




</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="color: #ff0000; font-size: 18pt;">ARG：</span><span style="color: #0000ff;">用于指定传递给构建运行时的变量</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span>
    ARG </span>&lt;name&gt;[=&lt;<span style="color: #0000ff;">default</span> value&gt;<span style="color: #000000;">]
<span style="color: #00ffff;">示例：</span>
    ARG site
    ARG build_user</span>=www</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;"><strong><span style="font-size: 18pt;"><span style="color: #ff0000;">ONBUILD</span>：</span><span style="color: #0000ff;">用于设置镜像触发器</span></strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"><span style="color: #ff00ff;">格式：</span><br />　　ONBUILD [INSTRUCTION]
<span style="color: #00ffff;">示例：</span>
　　ONBUILD ADD . </span>/app/<span style="color: #000000;">src
　　ONBUILD RUN </span>/usr/local/bin/python-build --dir /app/<span style="color: #000000;">src
<span style="color: #008000;">注：</span><br />　　当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span></span></pre>
</div>
<p><span style="font-family: 'courier new', courier;">&nbsp;</span></p>
<p><span style="font-family: 'courier new', courier; color: #ff0000;"><strong>以下是一个小例子：</strong></span></p>
<div class="cnblogs_code">
<pre><span style="font-family: 'courier new', courier;"><span style="color: #000000;"># This my first nginx Dockerfile
# Version </span><span style="color: #800080;">1.0</span><span style="color: #000000;">

# Base images <span style="color: #0000ff;">基础镜像</span>
FROM centos

#MAINTAINER <span style="color: #0000ff;">维护者信息</span>
MAINTAINER tianfeiyu 

<span style="color: #0000ff;"><span style="color: #000000;">#ENV</span> 设置环境变量</span>
ENV PATH </span>/usr/local/nginx/<span style="color: #000000;">sbin:$PATH

#ADD <span style="color: #0000ff;"> 文件放在当前目录下，拷过去会自动解压</span>
ADD nginx</span>-<span style="color: #800080;">1.8</span>.<span style="color: #800080;">0</span>.tar.gz /usr/local/<span style="color: #000000;">  
ADD epel</span>-release-latest-<span style="color: #800080;">7</span>.noarch.rpm /usr/local/<span style="color: #000000;">  

#RUN <span style="color: #0000ff;">执行以下命令</span> 
RUN rpm </span>-ivh /usr/local/epel-release-latest-<span style="color: #800080;">7</span><span style="color: #000000;">.noarch.rpm
RUN yum install </span>-y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp;<span style="color: #000000;"> yum clean all
RUN useradd </span>-s /sbin/nologin -<span style="color: #000000;">M www

#WORKDIR <span style="color: #0000ff;">相当于cd</span>
WORKDIR </span>/usr/local/nginx-<span style="color: #800080;">1.8</span>.<span style="color: #800080;">0</span><span style="color: #000000;"> 

RUN .</span>/configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp;<span style="color: #000000;"> make install

RUN echo </span><span style="color: #800000;">"</span><span style="color: #800000;">daemon off;</span><span style="color: #800000;">"</span> &gt;&gt; /etc/<span style="color: #000000;">nginx.conf

#EXPOSE <span style="color: #0000ff;">映射端口</span>
EXPOSE </span><span style="color: #800080;">80</span><span style="color: #000000;">

#CMD<span style="color: #0000ff;"> 运行以下命令</span>
CMD [</span><span style="color: #800000;">"</span><span style="color: #800000;">nginx</span><span style="color: #800000;">"</span>]</span></pre>
</div>
<p><span style="font-family: 'courier new', courier;">&nbsp;</span></p>
<p><strong><span style="font-family: 'courier new', courier; color: #ff0000;">最后用一张图解释常用指令的意义^-^</span></strong></p>
<p><span style="font-family: 'courier new', courier;"><img src="https://images2017.cnblogs.com/blog/911490/201712/911490-20171208222222062-849020400.png" alt="" /></span></p>
<p>&nbsp;</p>
<p><span style="font-family: 'courier new', courier;">&nbsp;</span></p>
<h3><span style="font-family: 'courier new', courier;">&nbsp;</span></h3>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
		</div>
		<div class="postDesc">posted @ 
<span id="post-date">2017-12-08 22:34</span>&nbsp;
<a href="https://www.cnblogs.com/panwenbin-logs/">百衲本</a>&nbsp;
阅读(<span id="post_view_count">...</span>)&nbsp;
评论(<span id="post_comment_count">...</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=8007348" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(8007348);return false;">收藏</a></div>
	</div>
	
	
</div><!--end: topics 文章、评论容器-->
<script src="https://common.cnblogs.com/highlight/9.12.0/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 272534, cb_blogApp = 'panwenbin-logs', cb_blogUserGuid = '372d9809-79e7-e511-9fc1-ac853d9f53cc';
    var cb_entryId = 8007348, cb_entryCreatedDate = '2017-12-08 22:34', cb_postType = 1; 
    loadViewCount(cb_entryId);
    loadSideColumnAd();
</script><a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<script>
    var commentManager = new blogCommentManager();
    commentManager.renderComments(0);
</script>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="c_ad_block">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_news"></div>
    <div id="cnblogs_c2" class="c_ad_block">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_kb"></div>
    <div id="HistoryToday" class="c_ad_block"></div>
    <script type="text/javascript">
        fixPostBody();
        deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);        deliverT2();
        deliverC1C2();
        loadNewsAndKb();
        loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
        loadOptUnderPost();
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div></div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>

<div id="sidebar_ad"></div>
			<div id="calendar"><div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script></div>
			
			<DIV id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</DIV>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2020 百衲本
<br /><span id="poweredby">Powered by .NET Core on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        <div id="share"><a class="divBlock" href="http://weibo.com/u/1986192324" target="_blank" id="sina">　</a><a class="divBlock" href="http://t.qq.com/loverning" target="_blank" id="tent">　</a></div>

<a id="toTop" title="返回顶部"></a>
    </div>
</body>
</html>
